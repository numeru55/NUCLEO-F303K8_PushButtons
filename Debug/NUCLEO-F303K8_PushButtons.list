
NUCLEO-F303K8_PushButtons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cac  08003cac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003cac  08003cac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cac  08003cac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb0  08003cb0  00013cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af14  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f5  00000000  00000000  0002afb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  0002cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b546  00000000  00000000  0002d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000099f9  00000000  00000000  00048b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c22a  00000000  00000000  00052567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ee791  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002380  00000000  00000000  000ee7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b60 	.word	0x08003b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b60 	.word	0x08003b60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Button_Init>:
	GPIO_TypeDef *GPIOx;
	uint16_t GPIO_Pin;
} BUTTON_BUFFER[MAX_BUTTONS];


void Button_Init(GPIO_TypeDef *G, uint16_t P){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	807b      	strh	r3, [r7, #2]
	BUTTON_BUFFER[BUTTON_NUM].GPIOx = G;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <Button_Init+0x40>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4619      	mov	r1, r3
 8000282:	4a0c      	ldr	r2, [pc, #48]	; (80002b4 <Button_Init+0x44>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	BUTTON_BUFFER[BUTTON_NUM].GPIO_Pin = P;
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <Button_Init+0x40>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <Button_Init+0x44>)
 8000290:	00db      	lsls	r3, r3, #3
 8000292:	4413      	add	r3, r2
 8000294:	887a      	ldrh	r2, [r7, #2]
 8000296:	809a      	strh	r2, [r3, #4]
	BUTTON_NUM++;
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <Button_Init+0x40>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <Button_Init+0x40>)
 80002a2:	701a      	strb	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	200000a8 	.word	0x200000a8

080002b8 <Button_Clear>:
uint32_t BUTTON_CODE=0; // previous key code
uint32_t BUTTON_PREV_TIME=0; // previous time

enum Button_State_Value BUTTON_STATE=INIT;

void Button_Clear(){
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	BUTTON_STATE=RELEASE;
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <Button_Clear+0x14>)
 80002be:	2203      	movs	r2, #3
 80002c0:	701a      	strb	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	20000098 	.word	0x20000098

080002d0 <Button_Loop>:

uint32_t Button_Loop(){
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
	uint32_t current_key=0xffffffff;
 80002d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002da:	607b      	str	r3, [r7, #4]
	for (int i=MAX_BUTTONS-1; (i>0)|(i==0); i--) {
 80002dc:	2301      	movs	r3, #1
 80002de:	603b      	str	r3, [r7, #0]
 80002e0:	e014      	b.n	800030c <Button_Loop+0x3c>
		current_key = (current_key<<1) |
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	005c      	lsls	r4, r3, #1
				(HAL_GPIO_ReadPin(BUTTON_BUFFER[i].GPIOx, BUTTON_BUFFER[i].GPIO_Pin));
 80002e6:	4a47      	ldr	r2, [pc, #284]	; (8000404 <Button_Loop+0x134>)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80002ee:	4945      	ldr	r1, [pc, #276]	; (8000404 <Button_Loop+0x134>)
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	00db      	lsls	r3, r3, #3
 80002f4:	440b      	add	r3, r1
 80002f6:	889b      	ldrh	r3, [r3, #4]
 80002f8:	4619      	mov	r1, r3
 80002fa:	4610      	mov	r0, r2
 80002fc:	f000 fe26 	bl	8000f4c <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
		current_key = (current_key<<1) |
 8000302:	4323      	orrs	r3, r4
 8000304:	607b      	str	r3, [r7, #4]
	for (int i=MAX_BUTTONS-1; (i>0)|(i==0); i--) {
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	bfcc      	ite	gt
 8000312:	2301      	movgt	r3, #1
 8000314:	2300      	movle	r3, #0
 8000316:	b2da      	uxtb	r2, r3
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	bf0c      	ite	eq
 800031e:	2301      	moveq	r3, #1
 8000320:	2300      	movne	r3, #0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	4313      	orrs	r3, r2
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1da      	bne.n	80002e2 <Button_Loop+0x12>
	}

	current_key = ~current_key;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	43db      	mvns	r3, r3
 8000330:	607b      	str	r3, [r7, #4]

	// return current_key;

	switch (BUTTON_STATE) {
 8000332:	4b35      	ldr	r3, [pc, #212]	; (8000408 <Button_Loop+0x138>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b04      	cmp	r3, #4
 8000338:	d85f      	bhi.n	80003fa <Button_Loop+0x12a>
 800033a:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <Button_Loop+0x70>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	08000355 	.word	0x08000355
 8000344:	08000375 	.word	0x08000375
 8000348:	080003b1 	.word	0x080003b1
 800034c:	080003b7 	.word	0x080003b7
 8000350:	080003d1 	.word	0x080003d1
		case INIT:
			if (current_key>0) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d00a      	beq.n	8000370 <Button_Loop+0xa0>
				BUTTON_STATE=PRESSED;
 800035a:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <Button_Loop+0x138>)
 800035c:	2201      	movs	r2, #1
 800035e:	701a      	strb	r2, [r3, #0]
				BUTTON_CODE=current_key;
 8000360:	4a2a      	ldr	r2, [pc, #168]	; (800040c <Button_Loop+0x13c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6013      	str	r3, [r2, #0]
				BUTTON_PREV_TIME=HAL_GetTick();
 8000366:	f000 fb69 	bl	8000a3c <HAL_GetTick>
 800036a:	4603      	mov	r3, r0
 800036c:	4a28      	ldr	r2, [pc, #160]	; (8000410 <Button_Loop+0x140>)
 800036e:	6013      	str	r3, [r2, #0]
			}
			return 0;
 8000370:	2300      	movs	r3, #0
 8000372:	e042      	b.n	80003fa <Button_Loop+0x12a>
			break;
		case PRESSED:
			if (current_key > BUTTON_CODE ) { // means push more buttons
 8000374:	4b25      	ldr	r3, [pc, #148]	; (800040c <Button_Loop+0x13c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	429a      	cmp	r2, r3
 800037c:	d909      	bls.n	8000392 <Button_Loop+0xc2>
				BUTTON_CODE = current_key;
 800037e:	4a23      	ldr	r2, [pc, #140]	; (800040c <Button_Loop+0x13c>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	6013      	str	r3, [r2, #0]
				BUTTON_PREV_TIME=HAL_GetTick();
 8000384:	f000 fb5a 	bl	8000a3c <HAL_GetTick>
 8000388:	4603      	mov	r3, r0
 800038a:	4a21      	ldr	r2, [pc, #132]	; (8000410 <Button_Loop+0x140>)
 800038c:	6013      	str	r3, [r2, #0]
				return 0;
 800038e:	2300      	movs	r3, #0
 8000390:	e033      	b.n	80003fa <Button_Loop+0x12a>
			}
			if (HAL_GetTick()-BUTTON_PREV_TIME > BUTTON_TIME) {
 8000392:	f000 fb53 	bl	8000a3c <HAL_GetTick>
 8000396:	4602      	mov	r2, r0
 8000398:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <Button_Loop+0x140>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	2b4b      	cmp	r3, #75	; 0x4b
 80003a0:	d904      	bls.n	80003ac <Button_Loop+0xdc>
				BUTTON_STATE=PRESSING;
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <Button_Loop+0x138>)
 80003a4:	2202      	movs	r2, #2
 80003a6:	701a      	strb	r2, [r3, #0]
				return current_key;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	e026      	b.n	80003fa <Button_Loop+0x12a>
			}
			return 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	e024      	b.n	80003fa <Button_Loop+0x12a>
			break;
		case PRESSING: //  means returned keycode but main loop is not clear.
			return BUTTON_CODE;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <Button_Loop+0x13c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	e021      	b.n	80003fa <Button_Loop+0x12a>
			break;
		case RELEASE:
			if (current_key == 0) {
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d107      	bne.n	80003cc <Button_Loop+0xfc>
				BUTTON_STATE=RELEASED;
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <Button_Loop+0x138>)
 80003be:	2204      	movs	r2, #4
 80003c0:	701a      	strb	r2, [r3, #0]
				BUTTON_PREV_TIME=HAL_GetTick();
 80003c2:	f000 fb3b 	bl	8000a3c <HAL_GetTick>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4a11      	ldr	r2, [pc, #68]	; (8000410 <Button_Loop+0x140>)
 80003ca:	6013      	str	r3, [r2, #0]
			}
			return 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	e014      	b.n	80003fa <Button_Loop+0x12a>
			break;
		case RELEASED:
			if (current_key>1) {
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d904      	bls.n	80003e0 <Button_Loop+0x110>
				BUTTON_STATE=RELEASE;
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <Button_Loop+0x138>)
 80003d8:	2203      	movs	r2, #3
 80003da:	701a      	strb	r2, [r3, #0]
				return 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	e00c      	b.n	80003fa <Button_Loop+0x12a>
			}
			if (HAL_GetTick()-BUTTON_PREV_TIME > BUTTON_TIME) {
 80003e0:	f000 fb2c 	bl	8000a3c <HAL_GetTick>
 80003e4:	4602      	mov	r2, r0
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <Button_Loop+0x140>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	1ad3      	subs	r3, r2, r3
 80003ec:	2b4b      	cmp	r3, #75	; 0x4b
 80003ee:	d902      	bls.n	80003f6 <Button_Loop+0x126>
				BUTTON_STATE=INIT;
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <Button_Loop+0x138>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
			}
			return 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	e7ff      	b.n	80003fa <Button_Loop+0x12a>
			break;
	}

}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd90      	pop	{r4, r7, pc}
 8000402:	bf00      	nop
 8000404:	200000a8 	.word	0x200000a8
 8000408:	20000098 	.word	0x20000098
 800040c:	20000090 	.word	0x20000090
 8000410:	20000094 	.word	0x20000094

08000414 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	setbuf(stdout, NULL);
 800041a:	4b32      	ldr	r3, [pc, #200]	; (80004e4 <main+0xd0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f002 fb88 	bl	8002b38 <setbuf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000428:	f000 faae 	bl	8000988 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800042c:	f000 f86c 	bl	8000508 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000430:	f000 f8d6 	bl	80005e0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000434:	f000 f8a4 	bl	8000580 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	printf("Booted Nucleo F303K8.\r\n");
 8000438:	482b      	ldr	r0, [pc, #172]	; (80004e8 <main+0xd4>)
 800043a:	f002 fb75 	bl	8002b28 <puts>
	printf("Push PB0 and/or PA11.\r\n\r\n");
 800043e:	482b      	ldr	r0, [pc, #172]	; (80004ec <main+0xd8>)
 8000440:	f002 fb72 	bl	8002b28 <puts>

	Button_Init(GPIOA, GPIO_PIN_11); // bit 0
 8000444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f7ff ff10 	bl	8000270 <Button_Init>
	Button_Init(GPIOB, GPIO_PIN_0);  // bit 1
 8000450:	2101      	movs	r1, #1
 8000452:	4827      	ldr	r0, [pc, #156]	; (80004f0 <main+0xdc>)
 8000454:	f7ff ff0c 	bl	8000270 <Button_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		uint32_t k = Button_Loop();
 8000458:	f7ff ff3a 	bl	80002d0 <Button_Loop>
 800045c:	6038      	str	r0, [r7, #0]
		if (k) {
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f9      	beq.n	8000458 <main+0x44>
			Button_Clear();
 8000464:	f7ff ff28 	bl	80002b8 <Button_Clear>
			printf("HAL_GetTick=%lu keycode = %lu [", HAL_GetTick(), k);
 8000468:	f000 fae8 	bl	8000a3c <HAL_GetTick>
 800046c:	4603      	mov	r3, r0
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	4619      	mov	r1, r3
 8000472:	4820      	ldr	r0, [pc, #128]	; (80004f4 <main+0xe0>)
 8000474:	f002 fad2 	bl	8002a1c <iprintf>
			if (k & 2) {
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	f003 0302 	and.w	r3, r3, #2
 800047e:	2b00      	cmp	r3, #0
 8000480:	d003      	beq.n	800048a <main+0x76>
				printf("B0 ");
 8000482:	481d      	ldr	r0, [pc, #116]	; (80004f8 <main+0xe4>)
 8000484:	f002 faca 	bl	8002a1c <iprintf>
 8000488:	e002      	b.n	8000490 <main+0x7c>
			} else {
				printf("   ");
 800048a:	481c      	ldr	r0, [pc, #112]	; (80004fc <main+0xe8>)
 800048c:	f002 fac6 	bl	8002a1c <iprintf>
			}
			if (k & 1) {
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	2b00      	cmp	r3, #0
 8000498:	d003      	beq.n	80004a2 <main+0x8e>
				printf("A11");
 800049a:	4819      	ldr	r0, [pc, #100]	; (8000500 <main+0xec>)
 800049c:	f002 fabe 	bl	8002a1c <iprintf>
 80004a0:	e002      	b.n	80004a8 <main+0x94>
			} else {
				printf("   ");
 80004a2:	4816      	ldr	r0, [pc, #88]	; (80004fc <main+0xe8>)
 80004a4:	f002 faba 	bl	8002a1c <iprintf>
			}
			printf("]\r\n");
 80004a8:	4816      	ldr	r0, [pc, #88]	; (8000504 <main+0xf0>)
 80004aa:	f002 fb3d 	bl	8002b28 <puts>
			for (int i=0; i<k; i++) {
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	e012      	b.n	80004da <main+0xc6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2108      	movs	r1, #8
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <main+0xdc>)
 80004ba:	f000 fd5f 	bl	8000f7c <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80004be:	2064      	movs	r0, #100	; 0x64
 80004c0:	f000 fac8 	bl	8000a54 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2108      	movs	r1, #8
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <main+0xdc>)
 80004ca:	f000 fd57 	bl	8000f7c <HAL_GPIO_WritePin>
				HAL_Delay(100);
 80004ce:	2064      	movs	r0, #100	; 0x64
 80004d0:	f000 fac0 	bl	8000a54 <HAL_Delay>
			for (int i=0; i<k; i++) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3301      	adds	r3, #1
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d8e8      	bhi.n	80004b4 <main+0xa0>
	while (1) {
 80004e2:	e7b9      	b.n	8000458 <main+0x44>
 80004e4:	2000000c 	.word	0x2000000c
 80004e8:	08003b78 	.word	0x08003b78
 80004ec:	08003b90 	.word	0x08003b90
 80004f0:	48000400 	.word	0x48000400
 80004f4:	08003bac 	.word	0x08003bac
 80004f8:	08003bcc 	.word	0x08003bcc
 80004fc:	08003bd0 	.word	0x08003bd0
 8000500:	08003bd4 	.word	0x08003bd4
 8000504:	08003bd8 	.word	0x08003bd8

08000508 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b090      	sub	sp, #64	; 0x40
 800050c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	2228      	movs	r2, #40	; 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fa78 	bl	8002a0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052a:	2302      	movs	r3, #2
 800052c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000532:	2310      	movs	r3, #16
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000536:	2300      	movs	r3, #0
 8000538:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fd34 	bl	8000fac <HAL_RCC_OscConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x46>
		Error_Handler();
 800054a:	f000 f8c1 	bl	80006d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800054e:	230f      	movs	r3, #15
 8000550:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fc28 	bl	8001dbc <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x6e>
		Error_Handler();
 8000572:	f000 f8ad 	bl	80006d0 <Error_Handler>
	}
}
 8000576:	bf00      	nop
 8000578:	3740      	adds	r7, #64	; 0x40
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <MX_USART2_UART_Init+0x5c>)
 8000588:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 800058c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000590:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005a6:	220c      	movs	r2, #12
 80005a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_USART2_UART_Init+0x58>)
 80005c4:	f001 fe30 	bl	8002228 <HAL_UART_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80005ce:	f000 f87f 	bl	80006d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000b8 	.word	0x200000b8
 80005dc:	40004400 	.word	0x40004400

080005e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <MX_GPIO_Init+0xc0>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <MX_GPIO_Init+0xc0>)
 80005fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xc0>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_GPIO_Init+0xc0>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <MX_GPIO_Init+0xc0>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_GPIO_Init+0xc0>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_GPIO_Init+0xc0>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <MX_GPIO_Init+0xc0>)
 800062c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_GPIO_Init+0xc0>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2118      	movs	r1, #24
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <MX_GPIO_Init+0xc4>)
 8000644:	f000 fc9a 	bl	8000f7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000648:	2301      	movs	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000650:	2301      	movs	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4619      	mov	r1, r3
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_GPIO_Init+0xc4>)
 800065c:	f000 fb04 	bl	8000c68 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000664:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066a:	2301      	movs	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 faf6 	bl	8000c68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 800067c:	2318      	movs	r3, #24
 800067e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0xc4>)
 8000694:	f000 fae8 	bl	8000c68 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000400 	.word	0x48000400

080006a8 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	230a      	movs	r3, #10
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <_write+0x24>)
 80006be:	f001 fe01 	bl	80022c4 <HAL_UART_Transmit>
	return len;
 80006c2:	687b      	ldr	r3, [r7, #4]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200000b8 	.word	0x200000b8

080006d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x44>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x44>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x44>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x44>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x44>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <HAL_UART_MspInit+0x80>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d129      	bne.n	800079a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_UART_MspInit+0x84>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_UART_MspInit+0x84>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_UART_MspInit+0x84>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_UART_MspInit+0x84>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <HAL_UART_MspInit+0x84>)
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_UART_MspInit+0x84>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000776:	f248 0304 	movw	r3, #32772	; 0x8004
 800077a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000788:	2307      	movs	r3, #7
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fa67 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40004400 	.word	0x40004400
 80007a8:	40021000 	.word	0x40021000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f90c 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e00a      	b.n	8000828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000812:	f3af 8000 	nop.w
 8000816:	4601      	mov	r1, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	b2ca      	uxtb	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf0      	blt.n	8000812 <_read+0x12>
	}

return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_close>:
	}
	return len;
}

int _close(int file)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	return -1;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000862:	605a      	str	r2, [r3, #4]
	return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <_isatty>:

int _isatty(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	return 1;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
	return 0;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <_sbrk+0x5c>)
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <_sbrk+0x60>)
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <_sbrk+0x64>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <_sbrk+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d207      	bcs.n	80008e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d4:	f002 f870 	bl	80029b8 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e2:	e009      	b.n	80008f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <_sbrk+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20003000 	.word	0x20003000
 8000904:	00000400 	.word	0x00000400
 8000908:	2000009c 	.word	0x2000009c
 800090c:	20000150 	.word	0x20000150

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	; (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	; (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800095e:	f7ff ffd7 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f002 f82f 	bl	80029c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000966:	f7ff fd55 	bl	8000414 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800096c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000978:	08003cb4 	.word	0x08003cb4
  ldr r2, =_sbss
 800097c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000980:	20000150 	.word	0x20000150

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f931 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fe9a 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f93b 	bl	8000c4e <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 f911 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x20>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x24>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <HAL_IncTick+0x24>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	2000013c 	.word	0x2000013c

08000a3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <HAL_GetTick+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000013c 	.word	0x2000013c

08000a54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff ffee 	bl	8000a3c <HAL_GetTick>
 8000a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a6c:	d005      	beq.n	8000a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Delay+0x44>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a7a:	bf00      	nop
 8000a7c:	f7ff ffde 	bl	8000a3c <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d8f7      	bhi.n	8000a7c <HAL_Delay+0x28>
  {
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff47 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c28:	f7ff ff5c 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6978      	ldr	r0, [r7, #20]
 8000c34:	f7ff ff8e 	bl	8000b54 <NVIC_EncodePriority>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	4611      	mov	r1, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff5d 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffb0 	bl	8000bbc <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c76:	e14e      	b.n	8000f16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8140 	beq.w	8000f10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d005      	beq.n	8000ca8 <HAL_GPIO_Init+0x40>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f003 0201 	and.w	r2, r3, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d017      	beq.n	8000d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d123      	bne.n	8000d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	6939      	ldr	r1, [r7, #16]
 8000d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0203 	and.w	r2, r3, #3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 809a 	beq.w	8000f10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ddc:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a54      	ldr	r2, [pc, #336]	; (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b52      	ldr	r3, [pc, #328]	; (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df4:	4a50      	ldr	r2, [pc, #320]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1e:	d013      	beq.n	8000e48 <HAL_GPIO_Init+0x1e0>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a46      	ldr	r2, [pc, #280]	; (8000f3c <HAL_GPIO_Init+0x2d4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d00d      	beq.n	8000e44 <HAL_GPIO_Init+0x1dc>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a45      	ldr	r2, [pc, #276]	; (8000f40 <HAL_GPIO_Init+0x2d8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0x1d8>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a44      	ldr	r2, [pc, #272]	; (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d101      	bne.n	8000e3c <HAL_GPIO_Init+0x1d4>
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e006      	b.n	8000e4a <HAL_GPIO_Init+0x1e2>
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	e004      	b.n	8000e4a <HAL_GPIO_Init+0x1e2>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e002      	b.n	8000e4a <HAL_GPIO_Init+0x1e2>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <HAL_GPIO_Init+0x1e2>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	f002 0203 	and.w	r2, r2, #3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4093      	lsls	r3, r2
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e5a:	4937      	ldr	r1, [pc, #220]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e68:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e8c:	4a2e      	ldr	r2, [pc, #184]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000eb6:	4a24      	ldr	r2, [pc, #144]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee0:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f47f aea9 	bne.w	8000c78 <HAL_GPIO_Init+0x10>
  }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	371c      	adds	r7, #28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000800 	.word	0x48000800
 8000f44:	48000c00 	.word	0x48000c00
 8000f48:	40010400 	.word	0x40010400

08000f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e001      	b.n	8000f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f000 bef4 	b.w	8001dae <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 816a 	beq.w	80012aa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fd6:	4bb3      	ldr	r3, [pc, #716]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d00c      	beq.n	8000ffc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe2:	4bb0      	ldr	r3, [pc, #704]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d159      	bne.n	80010a2 <HAL_RCC_OscConfig+0xf6>
 8000fee:	4bad      	ldr	r3, [pc, #692]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffa:	d152      	bne.n	80010a2 <HAL_RCC_OscConfig+0xf6>
 8000ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001000:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001010:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <HAL_RCC_OscConfig+0x82>
 8001028:	4b9e      	ldr	r3, [pc, #632]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e015      	b.n	800105a <HAL_RCC_OscConfig+0xae>
 800102e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001032:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001046:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800104a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001056:	4b93      	ldr	r3, [pc, #588]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001062:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001066:	fa92 f2a2 	rbit	r2, r2
 800106a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800106e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f042 0220 	orr.w	r2, r2, #32
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	f002 021f 	and.w	r2, r2, #31
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 810c 	beq.w	80012a8 <HAL_RCC_OscConfig+0x2fc>
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 8106 	bne.w	80012a8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	f000 be86 	b.w	8001dae <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ac:	d106      	bne.n	80010bc <HAL_RCC_OscConfig+0x110>
 80010ae:	4b7d      	ldr	r3, [pc, #500]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a7c      	ldr	r2, [pc, #496]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e030      	b.n	800111e <HAL_RCC_OscConfig+0x172>
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x134>
 80010c6:	4b77      	ldr	r3, [pc, #476]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a76      	ldr	r2, [pc, #472]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b74      	ldr	r3, [pc, #464]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a73      	ldr	r2, [pc, #460]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e01e      	b.n	800111e <HAL_RCC_OscConfig+0x172>
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ea:	d10c      	bne.n	8001106 <HAL_RCC_OscConfig+0x15a>
 80010ec:	4b6d      	ldr	r3, [pc, #436]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a6c      	ldr	r2, [pc, #432]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a69      	ldr	r2, [pc, #420]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80010fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e00b      	b.n	800111e <HAL_RCC_OscConfig+0x172>
 8001106:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a66      	ldr	r2, [pc, #408]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 800110c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a63      	ldr	r2, [pc, #396]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 8001118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111e:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	f023 020f 	bic.w	r2, r3, #15
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	495d      	ldr	r1, [pc, #372]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 800112e:	4313      	orrs	r3, r2
 8001130:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d059      	beq.n	80011f0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fc7e 	bl	8000a3c <HAL_GetTick>
 8001140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff fc79 	bl	8000a3c <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d902      	bls.n	800115c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	f000 be29 	b.w	8001dae <HAL_RCC_OscConfig+0xe02>
 800115c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001160:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001170:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001174:	fab3 f383 	clz	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b01      	cmp	r3, #1
 8001186:	d102      	bne.n	800118e <HAL_RCC_OscConfig+0x1e2>
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x20e>
 800118e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001192:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011aa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80011c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011c6:	fa92 f2a2 	rbit	r2, r2
 80011ca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80011ce:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011d2:	fab2 f282 	clz	r2, r2
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	f042 0220 	orr.w	r2, r2, #32
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	f002 021f 	and.w	r2, r2, #31
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0ab      	beq.n	8001146 <HAL_RCC_OscConfig+0x19a>
 80011ee:	e05c      	b.n	80012aa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc24 	bl	8000a3c <HAL_GetTick>
 80011f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fa:	f7ff fc1f 	bl	8000a3c <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	; 0x64
 8001208:	d902      	bls.n	8001210 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	f000 bdcf 	b.w	8001dae <HAL_RCC_OscConfig+0xe02>
 8001210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001214:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001224:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d102      	bne.n	8001242 <HAL_RCC_OscConfig+0x296>
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	e015      	b.n	800126e <HAL_RCC_OscConfig+0x2c2>
 8001242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001246:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001256:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800125a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800125e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_RCC_OscConfig+0x2f8>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001272:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001276:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800127a:	fa92 f2a2 	rbit	r2, r2
 800127e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001282:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001286:	fab2 f282 	clz	r2, r2
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	f042 0220 	orr.w	r2, r2, #32
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	f002 021f 	and.w	r2, r2, #31
 8001296:	2101      	movs	r1, #1
 8001298:	fa01 f202 	lsl.w	r2, r1, r2
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1ab      	bne.n	80011fa <HAL_RCC_OscConfig+0x24e>
 80012a2:	e002      	b.n	80012aa <HAL_RCC_OscConfig+0x2fe>
 80012a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 816f 	beq.w	8001598 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012ba:	4bd0      	ldr	r3, [pc, #832]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012c6:	4bcd      	ldr	r3, [pc, #820]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d16c      	bne.n	80013ac <HAL_RCC_OscConfig+0x400>
 80012d2:	4bca      	ldr	r3, [pc, #808]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d166      	bne.n	80013ac <HAL_RCC_OscConfig+0x400>
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012e8:	fa93 f3a3 	rbit	r3, r3
 80012ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80012f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d102      	bne.n	800130e <HAL_RCC_OscConfig+0x362>
 8001308:	4bbc      	ldr	r3, [pc, #752]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	e013      	b.n	8001336 <HAL_RCC_OscConfig+0x38a>
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001314:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001326:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001332:	4bb2      	ldr	r3, [pc, #712]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	2202      	movs	r2, #2
 8001338:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800133c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001340:	fa92 f2a2 	rbit	r2, r2
 8001344:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001348:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800134c:	fab2 f282 	clz	r2, r2
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	f042 0220 	orr.w	r2, r2, #32
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	f002 021f 	and.w	r2, r2, #31
 800135c:	2101      	movs	r1, #1
 800135e:	fa01 f202 	lsl.w	r2, r1, r2
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <HAL_RCC_OscConfig+0x3cc>
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d002      	beq.n	8001378 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f000 bd1b 	b.w	8001dae <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	21f8      	movs	r1, #248	; 0xf8
 8001388:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001390:	fa91 f1a1 	rbit	r1, r1
 8001394:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001398:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800139c:	fab1 f181 	clz	r1, r1
 80013a0:	b2c9      	uxtb	r1, r1
 80013a2:	408b      	lsls	r3, r1
 80013a4:	4995      	ldr	r1, [pc, #596]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e0f5      	b.n	8001598 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8085 	beq.w	80014c2 <HAL_RCC_OscConfig+0x516>
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	461a      	mov	r2, r3
 80013e0:	2301      	movs	r3, #1
 80013e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb2a 	bl	8000a3c <HAL_GetTick>
 80013e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fb25 	bl	8000a3c <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d902      	bls.n	8001404 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	f000 bcd5 	b.w	8001dae <HAL_RCC_OscConfig+0xe02>
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001416:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	095b      	lsrs	r3, r3, #5
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <HAL_RCC_OscConfig+0x488>
 800142e:	4b73      	ldr	r3, [pc, #460]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	e013      	b.n	800145c <HAL_RCC_OscConfig+0x4b0>
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800144c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001458:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	2202      	movs	r2, #2
 800145e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001462:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001466:	fa92 f2a2 	rbit	r2, r2
 800146a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800146e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001472:	fab2 f282 	clz	r2, r2
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	f042 0220 	orr.w	r2, r2, #32
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f002 021f 	and.w	r2, r2, #31
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0af      	beq.n	80013ee <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	21f8      	movs	r1, #248	; 0xf8
 800149e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014a6:	fa91 f1a1 	rbit	r1, r1
 80014aa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80014ae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014b2:	fab1 f181 	clz	r1, r1
 80014b6:	b2c9      	uxtb	r1, r1
 80014b8:	408b      	lsls	r3, r1
 80014ba:	4950      	ldr	r1, [pc, #320]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e06a      	b.n	8001598 <HAL_RCC_OscConfig+0x5ec>
 80014c2:	2301      	movs	r3, #1
 80014c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80014d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d8:	fab3 f383 	clz	r3, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	461a      	mov	r2, r3
 80014ea:	2300      	movs	r3, #0
 80014ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff faa5 	bl	8000a3c <HAL_GetTick>
 80014f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f6:	e00a      	b.n	800150e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f8:	f7ff faa0 	bl	8000a3c <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d902      	bls.n	800150e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	f000 bc50 	b.w	8001dae <HAL_RCC_OscConfig+0xe02>
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x592>
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e013      	b.n	8001566 <HAL_RCC_OscConfig+0x5ba>
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001556:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x650>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2202      	movs	r2, #2
 8001568:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800156c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001570:	fa92 f2a2 	rbit	r2, r2
 8001574:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001578:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800157c:	fab2 f282 	clz	r2, r2
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	f042 0220 	orr.w	r2, r2, #32
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f002 021f 	and.w	r2, r2, #31
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1af      	bne.n	80014f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80da 	beq.w	800175c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d069      	beq.n	8001686 <HAL_RCC_OscConfig+0x6da>
 80015b2:	2301      	movs	r3, #1
 80015b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80015c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_RCC_OscConfig+0x654>)
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	461a      	mov	r2, r3
 80015d8:	2301      	movs	r3, #1
 80015da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa2e 	bl	8000a3c <HAL_GetTick>
 80015e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e4:	e00e      	b.n	8001604 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e6:	f7ff fa29 	bl	8000a3c <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d906      	bls.n	8001604 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e3d9      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	10908120 	.word	0x10908120
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001616:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800161a:	2202      	movs	r2, #2
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fa93 f2a3 	rbit	r2, r3
 8001628:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001632:	2202      	movs	r2, #2
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f2a3 	rbit	r2, r3
 8001640:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001644:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4ba5      	ldr	r3, [pc, #660]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800164e:	2102      	movs	r1, #2
 8001650:	6019      	str	r1, [r3, #0]
 8001652:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	fa93 f1a3 	rbit	r1, r3
 800165c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001660:	6019      	str	r1, [r3, #0]
  return result;
 8001662:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	4013      	ands	r3, r2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0b0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x63a>
 8001684:	e06a      	b.n	800175c <HAL_RCC_OscConfig+0x7b0>
 8001686:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	fa93 f2a3 	rbit	r2, r3
 8001698:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800169c:	601a      	str	r2, [r3, #0]
  return result;
 800169e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_OscConfig+0x934>)
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	461a      	mov	r2, r3
 80016b4:	2300      	movs	r3, #0
 80016b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f9c0 	bl	8000a3c <HAL_GetTick>
 80016bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff f9bb 	bl	8000a3c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e36b      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
 80016d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016da:	2202      	movs	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fa93 f2a3 	rbit	r2, r3
 80016e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016f2:	2202      	movs	r2, #2
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800171c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171e:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001722:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001726:	2102      	movs	r1, #2
 8001728:	6019      	str	r1, [r3, #0]
 800172a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	fa93 f1a3 	rbit	r1, r3
 8001734:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001738:	6019      	str	r1, [r3, #0]
  return result;
 800173a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1b2      	bne.n	80016c2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8158 	beq.w	8001a1c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d112      	bne.n	80017a4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b57      	ldr	r3, [pc, #348]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a56      	ldr	r2, [pc, #344]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b54      	ldr	r3, [pc, #336]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_RCC_OscConfig+0x938>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11a      	bne.n	80017e6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b0:	4b4c      	ldr	r3, [pc, #304]	; (80018e4 <HAL_RCC_OscConfig+0x938>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a4b      	ldr	r2, [pc, #300]	; (80018e4 <HAL_RCC_OscConfig+0x938>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017bc:	f7ff f93e 	bl	8000a3c <HAL_GetTick>
 80017c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	e009      	b.n	80017da <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c6:	f7ff f939 	bl	8000a3c <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b64      	cmp	r3, #100	; 0x64
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e2e9      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_RCC_OscConfig+0x938>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ef      	beq.n	80017c6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x852>
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a39      	ldr	r2, [pc, #228]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	e02f      	b.n	800185e <HAL_RCC_OscConfig+0x8b2>
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10c      	bne.n	8001822 <HAL_RCC_OscConfig+0x876>
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a33      	ldr	r2, [pc, #204]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4a30      	ldr	r2, [pc, #192]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 800181a:	f023 0304 	bic.w	r3, r3, #4
 800181e:	6213      	str	r3, [r2, #32]
 8001820:	e01d      	b.n	800185e <HAL_RCC_OscConfig+0x8b2>
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x89a>
 800182c:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a2a      	ldr	r2, [pc, #168]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	4b28      	ldr	r3, [pc, #160]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x8b2>
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a24      	ldr	r2, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a21      	ldr	r2, [pc, #132]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d06b      	beq.n	8001940 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff f8e8 	bl	8000a3c <HAL_GetTick>
 800186c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	e00b      	b.n	800188a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff f8e3 	bl	8000a3c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e291      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
 800188a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800188e:	2202      	movs	r2, #2
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80018a6:	2202      	movs	r2, #2
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018b8:	601a      	str	r2, [r3, #0]
  return result;
 80018ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d109      	bne.n	80018e8 <HAL_RCC_OscConfig+0x93c>
 80018d4:	4b01      	ldr	r3, [pc, #4]	; (80018dc <HAL_RCC_OscConfig+0x930>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	e014      	b.n	8001904 <HAL_RCC_OscConfig+0x958>
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	10908120 	.word	0x10908120
 80018e4:	40007000 	.word	0x40007000
 80018e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018ec:	2202      	movs	r2, #2
 80018ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	4bbb      	ldr	r3, [pc, #748]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001908:	2102      	movs	r1, #2
 800190a:	6011      	str	r1, [r2, #0]
 800190c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	fa92 f1a2 	rbit	r1, r2
 8001916:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800191a:	6011      	str	r1, [r2, #0]
  return result;
 800191c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f002 021f 	and.w	r2, r2, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d099      	beq.n	8001872 <HAL_RCC_OscConfig+0x8c6>
 800193e:	e063      	b.n	8001a08 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7ff f87c 	bl	8000a3c <HAL_GetTick>
 8001944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	e00b      	b.n	8001962 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f7ff f877 	bl	8000a3c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e225      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
 8001962:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001966:	2202      	movs	r2, #2
 8001968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f2a3 	rbit	r2, r3
 8001974:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800197e:	2202      	movs	r2, #2
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001990:	601a      	str	r2, [r3, #0]
  return result;
 8001992:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001996:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0xa06>
 80019ac:	4b90      	ldr	r3, [pc, #576]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	e00d      	b.n	80019ce <HAL_RCC_OscConfig+0xa22>
 80019b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fa93 f2a3 	rbit	r2, r3
 80019c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	4b89      	ldr	r3, [pc, #548]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019d2:	2102      	movs	r1, #2
 80019d4:	6011      	str	r1, [r2, #0]
 80019d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	fa92 f1a2 	rbit	r1, r2
 80019e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019e4:	6011      	str	r1, [r2, #0]
  return result;
 80019e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	fab2 f282 	clz	r2, r2
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f002 021f 	and.w	r2, r2, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1a0      	bne.n	800194a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a08:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a10:	4b77      	ldr	r3, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	4a76      	ldr	r2, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 81c2 	beq.w	8001dac <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a28:	4b71      	ldr	r3, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	f000 819c 	beq.w	8001d6e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	f040 8114 	bne.w	8001c6a <HAL_RCC_OscConfig+0xcbe>
 8001a42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	fa93 f2a3 	rbit	r2, r3
 8001a56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a5a:	601a      	str	r2, [r3, #0]
  return result;
 8001a5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	461a      	mov	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7fe ffe0 	bl	8000a3c <HAL_GetTick>
 8001a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a82:	f7fe ffdb 	bl	8000a3c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e18b      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
 8001a96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001aae:	601a      	str	r2, [r3, #0]
  return result;
 8001ab0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ab4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xb24>
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	e01b      	b.n	8001b08 <HAL_RCC_OscConfig+0xb5c>
 8001ad0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b10:	6011      	str	r1, [r2, #0]
 8001b12:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	fa92 f1a2 	rbit	r1, r2
 8001b1c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001b20:	6011      	str	r1, [r2, #0]
  return result;
 8001b22:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f042 0220 	orr.w	r2, r2, #32
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f002 021f 	and.w	r2, r2, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d19e      	bne.n	8001a82 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	4925      	ldr	r1, [pc, #148]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
 8001b60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b78:	601a      	str	r2, [r3, #0]
  return result;
 8001b7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b7e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	461a      	mov	r2, r3
 8001b92:	2301      	movs	r3, #1
 8001b94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7fe ff51 	bl	8000a3c <HAL_GetTick>
 8001b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9e:	e009      	b.n	8001bb4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7fe ff4c 	bl	8000a3c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0fc      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
 8001bb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bcc:	601a      	str	r2, [r3, #0]
  return result;
 8001bce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xc48>
 8001be8:	4b01      	ldr	r3, [pc, #4]	; (8001bf0 <HAL_RCC_OscConfig+0xc44>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e01e      	b.n	8001c2c <HAL_RCC_OscConfig+0xc80>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <HAL_RCC_OscConfig+0xe0c>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c34:	6011      	str	r1, [r2, #0]
 8001c36:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	fa92 f1a2 	rbit	r1, r2
 8001c40:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c44:	6011      	str	r1, [r2, #0]
  return result;
 8001c46:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	fab2 f282 	clz	r2, r2
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	f042 0220 	orr.w	r2, r2, #32
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f002 021f 	and.w	r2, r2, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d09b      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xbf4>
 8001c68:	e0a0      	b.n	8001dac <HAL_RCC_OscConfig+0xe00>
 8001c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c82:	601a      	str	r2, [r3, #0]
  return result;
 8001c84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fecc 	bl	8000a3c <HAL_GetTick>
 8001ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fec7 	bl	8000a3c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e077      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
 8001cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd6:	601a      	str	r2, [r3, #0]
  return result;
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xd4c>
 8001cf2:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <HAL_RCC_OscConfig+0xe0c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	e01b      	b.n	8001d30 <HAL_RCC_OscConfig+0xd84>
 8001cf8:	f107 0320 	add.w	r3, r7, #32
 8001cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f107 0318 	add.w	r3, r7, #24
 8001d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	fa93 f2a3 	rbit	r2, r3
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCC_OscConfig+0xe0c>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f107 0210 	add.w	r2, r7, #16
 8001d34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	f107 0210 	add.w	r2, r7, #16
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fa92 f1a2 	rbit	r1, r2
 8001d44:	f107 020c 	add.w	r2, r7, #12
 8001d48:	6011      	str	r1, [r2, #0]
  return result;
 8001d4a:	f107 020c 	add.w	r2, r7, #12
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	fab2 f282 	clz	r2, r2
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f042 0220 	orr.w	r2, r2, #32
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	f002 021f 	and.w	r2, r2, #31
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d19e      	bne.n	8001caa <HAL_RCC_OscConfig+0xcfe>
 8001d6c:	e01e      	b.n	8001dac <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e018      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_RCC_OscConfig+0xe0c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b09e      	sub	sp, #120	; 0x78
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e162      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b90      	ldr	r3, [pc, #576]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d910      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b8d      	ldr	r3, [pc, #564]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0207 	bic.w	r2, r3, #7
 8001dea:	498b      	ldr	r1, [pc, #556]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b89      	ldr	r3, [pc, #548]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e14a      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b82      	ldr	r3, [pc, #520]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	497f      	ldr	r1, [pc, #508]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80dc 	beq.w	8001fe8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d13c      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xf6>
 8001e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xa6>
 8001e5c:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	e00f      	b.n	8001e82 <HAL_RCC_ClockConfig+0xc6>
 8001e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e74:	663b      	str	r3, [r7, #96]	; 0x60
 8001e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e86:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d17b      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0f3      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d13c      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x178>
 8001eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x128>
 8001ede:	4b4f      	ldr	r3, [pc, #316]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e00f      	b.n	8001f04 <HAL_RCC_ClockConfig+0x148>
 8001ee4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f08:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f0c:	fa92 f2a2 	rbit	r2, r2
 8001f10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f14:	fab2 f282 	clz	r2, r2
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f002 021f 	and.w	r2, r2, #31
 8001f24:	2101      	movs	r1, #1
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d13a      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b2      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
 8001f34:	2302      	movs	r3, #2
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x1a0>
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e00d      	b.n	8001f78 <HAL_RCC_ClockConfig+0x1bc>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2202      	movs	r2, #2
 8001f7a:	61ba      	str	r2, [r7, #24]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	617a      	str	r2, [r7, #20]
  return result;
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e079      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	491a      	ldr	r1, [pc, #104]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fd40 	bl	8000a3c <HAL_GetTick>
 8001fbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe fd3c 	bl	8000a3c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e061      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d214      	bcs.n	8002020 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4906      	ldr	r1, [pc, #24]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <HAL_RCC_ClockConfig+0x25c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e040      	b.n	800209a <HAL_RCC_ClockConfig+0x2de>
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	491a      	ldr	r1, [pc, #104]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4912      	ldr	r1, [pc, #72]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800205e:	f000 f829 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800206c:	22f0      	movs	r2, #240	; 0xf0
 800206e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	fa92 f2a2 	rbit	r2, r2
 8002076:	60fa      	str	r2, [r7, #12]
  return result;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	fab2 f282 	clz	r2, r2
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	40d3      	lsrs	r3, r2
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	fa21 f303 	lsr.w	r3, r1, r3
 800208a:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_RCC_ClockConfig+0x2f0>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fc8e 	bl	80009b4 <HAL_InitTick>
  
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3778      	adds	r7, #120	; 0x78
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08003bdc 	.word	0x08003bdc
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b08b      	sub	sp, #44	; 0x2c
 80020b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x30>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x36>
 80020e2:	e03c      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020e6:	623b      	str	r3, [r7, #32]
      break;
 80020e8:	e03c      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	fa92 f2a2 	rbit	r2, r2
 80020fc:	607a      	str	r2, [r7, #4]
  return result;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	40d3      	lsrs	r3, r2
 8002108:	4a1c      	ldr	r2, [pc, #112]	; (800217c <HAL_RCC_GetSysClockFreq+0xc8>)
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	220f      	movs	r2, #15
 8002118:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	fa92 f2a2 	rbit	r2, r2
 8002120:	60fa      	str	r2, [r7, #12]
  return result;
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	40d3      	lsrs	r3, r2
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <HAL_RCC_GetSysClockFreq+0xcc>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	fbb2 f2f3 	udiv	r2, r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
 800214c:	e004      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	e002      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002160:	623b      	str	r3, [r7, #32]
      break;
 8002162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002164:	6a3b      	ldr	r3, [r7, #32]
}
 8002166:	4618      	mov	r0, r3
 8002168:	372c      	adds	r7, #44	; 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	007a1200 	.word	0x007a1200
 800217c:	08003bf4 	.word	0x08003bf4
 8002180:	08003c04 	.word	0x08003c04
 8002184:	003d0900 	.word	0x003d0900

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_RCC_GetHCLKFreq+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021a6:	f7ff ffef 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021aa:	4601      	mov	r1, r0
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	fa92 f2a2 	rbit	r2, r2
 80021c0:	603a      	str	r2, [r7, #0]
  return result;
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	fab2 f282 	clz	r2, r2
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	40d3      	lsrs	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08003bec 	.word	0x08003bec

080021e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021ea:	f7ff ffcd 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021ee:	4601      	mov	r1, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	fa92 f2a2 	rbit	r2, r2
 8002204:	603a      	str	r2, [r7, #0]
  return result;
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	fab2 f282 	clz	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	40d3      	lsrs	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	08003bec 	.word	0x08003bec

08002228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e040      	b.n	80022bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fa6a 	bl	8000724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2224      	movs	r2, #36	; 0x24
 8002254:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f8c0 	bl	80023ec <UART_SetConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e022      	b.n	80022bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f9ea 	bl	8002658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fa71 	bl	800279c <UART_CheckIdleState>
 80022ba:	4603      	mov	r3, r0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d8:	2b20      	cmp	r3, #32
 80022da:	f040 8082 	bne.w	80023e2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_UART_Transmit+0x26>
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e07a      	b.n	80023e4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_UART_Transmit+0x38>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e073      	b.n	80023e4 <HAL_UART_Transmit+0x120>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2221      	movs	r2, #33	; 0x21
 8002310:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002312:	f7fe fb93 	bl	8000a3c <HAL_GetTick>
 8002316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002330:	d108      	bne.n	8002344 <HAL_UART_Transmit+0x80>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e003      	b.n	800234c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002354:	e02d      	b.n	80023b2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2200      	movs	r2, #0
 800235e:	2180      	movs	r1, #128	; 0x80
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fa64 	bl	800282e <UART_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e039      	b.n	80023e4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002382:	b292      	uxth	r2, r2
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3302      	adds	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e008      	b.n	80023a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b292      	uxth	r2, r2
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3301      	adds	r3, #1
 800239e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1cb      	bne.n	8002356 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2200      	movs	r2, #0
 80023c6:	2140      	movs	r1, #64	; 0x40
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fa30 	bl	800282e <UART_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e005      	b.n	80023e4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
  }
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b8a      	ldr	r3, [pc, #552]	; (8002640 <UART_SetConfig+0x254>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	6979      	ldr	r1, [r7, #20]
 8002420:	430b      	orrs	r3, r1
 8002422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	430a      	orrs	r2, r1
 800245c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a78      	ldr	r2, [pc, #480]	; (8002644 <UART_SetConfig+0x258>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d120      	bne.n	80024aa <UART_SetConfig+0xbe>
 8002468:	4b77      	ldr	r3, [pc, #476]	; (8002648 <UART_SetConfig+0x25c>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b03      	cmp	r3, #3
 8002472:	d817      	bhi.n	80024a4 <UART_SetConfig+0xb8>
 8002474:	a201      	add	r2, pc, #4	; (adr r2, 800247c <UART_SetConfig+0x90>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	0800248d 	.word	0x0800248d
 8002480:	08002499 	.word	0x08002499
 8002484:	0800249f 	.word	0x0800249f
 8002488:	08002493 	.word	0x08002493
 800248c:	2300      	movs	r3, #0
 800248e:	77fb      	strb	r3, [r7, #31]
 8002490:	e01d      	b.n	80024ce <UART_SetConfig+0xe2>
 8002492:	2302      	movs	r3, #2
 8002494:	77fb      	strb	r3, [r7, #31]
 8002496:	e01a      	b.n	80024ce <UART_SetConfig+0xe2>
 8002498:	2304      	movs	r3, #4
 800249a:	77fb      	strb	r3, [r7, #31]
 800249c:	e017      	b.n	80024ce <UART_SetConfig+0xe2>
 800249e:	2308      	movs	r3, #8
 80024a0:	77fb      	strb	r3, [r7, #31]
 80024a2:	e014      	b.n	80024ce <UART_SetConfig+0xe2>
 80024a4:	2310      	movs	r3, #16
 80024a6:	77fb      	strb	r3, [r7, #31]
 80024a8:	e011      	b.n	80024ce <UART_SetConfig+0xe2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a67      	ldr	r2, [pc, #412]	; (800264c <UART_SetConfig+0x260>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d102      	bne.n	80024ba <UART_SetConfig+0xce>
 80024b4:	2300      	movs	r3, #0
 80024b6:	77fb      	strb	r3, [r7, #31]
 80024b8:	e009      	b.n	80024ce <UART_SetConfig+0xe2>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a64      	ldr	r2, [pc, #400]	; (8002650 <UART_SetConfig+0x264>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <UART_SetConfig+0xde>
 80024c4:	2300      	movs	r3, #0
 80024c6:	77fb      	strb	r3, [r7, #31]
 80024c8:	e001      	b.n	80024ce <UART_SetConfig+0xe2>
 80024ca:	2310      	movs	r3, #16
 80024cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d6:	d15b      	bne.n	8002590 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80024d8:	7ffb      	ldrb	r3, [r7, #31]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d827      	bhi.n	800252e <UART_SetConfig+0x142>
 80024de:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <UART_SetConfig+0xf8>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	08002509 	.word	0x08002509
 80024e8:	08002511 	.word	0x08002511
 80024ec:	08002519 	.word	0x08002519
 80024f0:	0800252f 	.word	0x0800252f
 80024f4:	0800251f 	.word	0x0800251f
 80024f8:	0800252f 	.word	0x0800252f
 80024fc:	0800252f 	.word	0x0800252f
 8002500:	0800252f 	.word	0x0800252f
 8002504:	08002527 	.word	0x08002527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002508:	f7ff fe4a 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 800250c:	61b8      	str	r0, [r7, #24]
        break;
 800250e:	e013      	b.n	8002538 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002510:	f7ff fe68 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 8002514:	61b8      	str	r0, [r7, #24]
        break;
 8002516:	e00f      	b.n	8002538 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002518:	4b4e      	ldr	r3, [pc, #312]	; (8002654 <UART_SetConfig+0x268>)
 800251a:	61bb      	str	r3, [r7, #24]
        break;
 800251c:	e00c      	b.n	8002538 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800251e:	f7ff fdc9 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002522:	61b8      	str	r0, [r7, #24]
        break;
 8002524:	e008      	b.n	8002538 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800252a:	61bb      	str	r3, [r7, #24]
        break;
 800252c:	e004      	b.n	8002538 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	77bb      	strb	r3, [r7, #30]
        break;
 8002536:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d074      	beq.n	8002628 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	005a      	lsls	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	441a      	add	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d916      	bls.n	800258a <UART_SetConfig+0x19e>
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002562:	d212      	bcs.n	800258a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	b29b      	uxth	r3, r3
 8002568:	f023 030f 	bic.w	r3, r3, #15
 800256c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	b29b      	uxth	r3, r3
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	b29a      	uxth	r2, r3
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	4313      	orrs	r3, r2
 800257e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	89fa      	ldrh	r2, [r7, #14]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	e04e      	b.n	8002628 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	77bb      	strb	r3, [r7, #30]
 800258e:	e04b      	b.n	8002628 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002590:	7ffb      	ldrb	r3, [r7, #31]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d827      	bhi.n	80025e6 <UART_SetConfig+0x1fa>
 8002596:	a201      	add	r2, pc, #4	; (adr r2, 800259c <UART_SetConfig+0x1b0>)
 8002598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259c:	080025c1 	.word	0x080025c1
 80025a0:	080025c9 	.word	0x080025c9
 80025a4:	080025d1 	.word	0x080025d1
 80025a8:	080025e7 	.word	0x080025e7
 80025ac:	080025d7 	.word	0x080025d7
 80025b0:	080025e7 	.word	0x080025e7
 80025b4:	080025e7 	.word	0x080025e7
 80025b8:	080025e7 	.word	0x080025e7
 80025bc:	080025df 	.word	0x080025df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025c0:	f7ff fdee 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 80025c4:	61b8      	str	r0, [r7, #24]
        break;
 80025c6:	e013      	b.n	80025f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025c8:	f7ff fe0c 	bl	80021e4 <HAL_RCC_GetPCLK2Freq>
 80025cc:	61b8      	str	r0, [r7, #24]
        break;
 80025ce:	e00f      	b.n	80025f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025d0:	4b20      	ldr	r3, [pc, #128]	; (8002654 <UART_SetConfig+0x268>)
 80025d2:	61bb      	str	r3, [r7, #24]
        break;
 80025d4:	e00c      	b.n	80025f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025d6:	f7ff fd6d 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80025da:	61b8      	str	r0, [r7, #24]
        break;
 80025dc:	e008      	b.n	80025f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e2:	61bb      	str	r3, [r7, #24]
        break;
 80025e4:	e004      	b.n	80025f0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	77bb      	strb	r3, [r7, #30]
        break;
 80025ee:	bf00      	nop
    }

    if (pclk != 0U)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d018      	beq.n	8002628 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	085a      	lsrs	r2, r3, #1
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	441a      	add	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	b29b      	uxth	r3, r3
 800260a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0f      	cmp	r3, #15
 8002610:	d908      	bls.n	8002624 <UART_SetConfig+0x238>
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002618:	d204      	bcs.n	8002624 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	e001      	b.n	8002628 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002634:	7fbb      	ldrb	r3, [r7, #30]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	efff69f3 	.word	0xefff69f3
 8002644:	40013800 	.word	0x40013800
 8002648:	40021000 	.word	0x40021000
 800264c:	40004400 	.word	0x40004400
 8002650:	40004800 	.word	0x40004800
 8002654:	007a1200 	.word	0x007a1200

08002658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01a      	beq.n	800276e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002756:	d10a      	bne.n	800276e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027ac:	f7fe f946 	bl	8000a3c <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d10e      	bne.n	80027de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f82d 	bl	800282e <UART_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e023      	b.n	8002826 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d10e      	bne.n	800280a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f817 	bl	800282e <UART_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e00d      	b.n	8002826 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b09c      	sub	sp, #112	; 0x70
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800283e:	e0a5      	b.n	800298c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002846:	f000 80a1 	beq.w	800298c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7fe f8f7 	bl	8000a3c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <UART_WaitOnFlagUntilTimeout+0x32>
 800285a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800285c:	2b00      	cmp	r3, #0
 800285e:	d13e      	bne.n	80028de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800286e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002870:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002874:	667b      	str	r3, [r7, #100]	; 0x64
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800287e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002880:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002884:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e6      	bne.n	8002860 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3308      	adds	r3, #8
 8002898:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	663b      	str	r3, [r7, #96]	; 0x60
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3308      	adds	r3, #8
 80028b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80028b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80028b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80028c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e5      	bne.n	8002892 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e067      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d04f      	beq.n	800298c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fa:	d147      	bne.n	800298c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002904:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800291a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800292a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800292c:	e841 2300 	strex	r3, r2, [r1]
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e6      	bne.n	8002906 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	3308      	adds	r3, #8
 800293e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	e853 3f00 	ldrex	r3, [r3]
 8002946:	613b      	str	r3, [r7, #16]
   return(result);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3308      	adds	r3, #8
 8002956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002958:	623a      	str	r2, [r7, #32]
 800295a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295c:	69f9      	ldr	r1, [r7, #28]
 800295e:	6a3a      	ldr	r2, [r7, #32]
 8002960:	e841 2300 	strex	r3, r2, [r1]
 8002964:	61bb      	str	r3, [r7, #24]
   return(result);
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e5      	bne.n	8002938 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e010      	b.n	80029ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4013      	ands	r3, r2
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	429a      	cmp	r2, r3
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	f43f af4a 	beq.w	8002840 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3770      	adds	r7, #112	; 0x70
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <__errno>:
 80029b8:	4b01      	ldr	r3, [pc, #4]	; (80029c0 <__errno+0x8>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000000c 	.word	0x2000000c

080029c4 <__libc_init_array>:
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	4d0d      	ldr	r5, [pc, #52]	; (80029fc <__libc_init_array+0x38>)
 80029c8:	4c0d      	ldr	r4, [pc, #52]	; (8002a00 <__libc_init_array+0x3c>)
 80029ca:	1b64      	subs	r4, r4, r5
 80029cc:	10a4      	asrs	r4, r4, #2
 80029ce:	2600      	movs	r6, #0
 80029d0:	42a6      	cmp	r6, r4
 80029d2:	d109      	bne.n	80029e8 <__libc_init_array+0x24>
 80029d4:	4d0b      	ldr	r5, [pc, #44]	; (8002a04 <__libc_init_array+0x40>)
 80029d6:	4c0c      	ldr	r4, [pc, #48]	; (8002a08 <__libc_init_array+0x44>)
 80029d8:	f001 f8c2 	bl	8003b60 <_init>
 80029dc:	1b64      	subs	r4, r4, r5
 80029de:	10a4      	asrs	r4, r4, #2
 80029e0:	2600      	movs	r6, #0
 80029e2:	42a6      	cmp	r6, r4
 80029e4:	d105      	bne.n	80029f2 <__libc_init_array+0x2e>
 80029e6:	bd70      	pop	{r4, r5, r6, pc}
 80029e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ec:	4798      	blx	r3
 80029ee:	3601      	adds	r6, #1
 80029f0:	e7ee      	b.n	80029d0 <__libc_init_array+0xc>
 80029f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f6:	4798      	blx	r3
 80029f8:	3601      	adds	r6, #1
 80029fa:	e7f2      	b.n	80029e2 <__libc_init_array+0x1e>
 80029fc:	08003cac 	.word	0x08003cac
 8002a00:	08003cac 	.word	0x08003cac
 8002a04:	08003cac 	.word	0x08003cac
 8002a08:	08003cb0 	.word	0x08003cb0

08002a0c <memset>:
 8002a0c:	4402      	add	r2, r0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d100      	bne.n	8002a16 <memset+0xa>
 8002a14:	4770      	bx	lr
 8002a16:	f803 1b01 	strb.w	r1, [r3], #1
 8002a1a:	e7f9      	b.n	8002a10 <memset+0x4>

08002a1c <iprintf>:
 8002a1c:	b40f      	push	{r0, r1, r2, r3}
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <iprintf+0x2c>)
 8002a20:	b513      	push	{r0, r1, r4, lr}
 8002a22:	681c      	ldr	r4, [r3, #0]
 8002a24:	b124      	cbz	r4, 8002a30 <iprintf+0x14>
 8002a26:	69a3      	ldr	r3, [r4, #24]
 8002a28:	b913      	cbnz	r3, 8002a30 <iprintf+0x14>
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f000 fb2c 	bl	8003088 <__sinit>
 8002a30:	ab05      	add	r3, sp, #20
 8002a32:	9a04      	ldr	r2, [sp, #16]
 8002a34:	68a1      	ldr	r1, [r4, #8]
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f000 fd05 	bl	8003448 <_vfiprintf_r>
 8002a3e:	b002      	add	sp, #8
 8002a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a44:	b004      	add	sp, #16
 8002a46:	4770      	bx	lr
 8002a48:	2000000c 	.word	0x2000000c

08002a4c <_puts_r>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	460e      	mov	r6, r1
 8002a50:	4605      	mov	r5, r0
 8002a52:	b118      	cbz	r0, 8002a5c <_puts_r+0x10>
 8002a54:	6983      	ldr	r3, [r0, #24]
 8002a56:	b90b      	cbnz	r3, 8002a5c <_puts_r+0x10>
 8002a58:	f000 fb16 	bl	8003088 <__sinit>
 8002a5c:	69ab      	ldr	r3, [r5, #24]
 8002a5e:	68ac      	ldr	r4, [r5, #8]
 8002a60:	b913      	cbnz	r3, 8002a68 <_puts_r+0x1c>
 8002a62:	4628      	mov	r0, r5
 8002a64:	f000 fb10 	bl	8003088 <__sinit>
 8002a68:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <_puts_r+0xd0>)
 8002a6a:	429c      	cmp	r4, r3
 8002a6c:	d120      	bne.n	8002ab0 <_puts_r+0x64>
 8002a6e:	686c      	ldr	r4, [r5, #4]
 8002a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a72:	07db      	lsls	r3, r3, #31
 8002a74:	d405      	bmi.n	8002a82 <_puts_r+0x36>
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	0598      	lsls	r0, r3, #22
 8002a7a:	d402      	bmi.n	8002a82 <_puts_r+0x36>
 8002a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a7e:	f000 fba1 	bl	80031c4 <__retarget_lock_acquire_recursive>
 8002a82:	89a3      	ldrh	r3, [r4, #12]
 8002a84:	0719      	lsls	r1, r3, #28
 8002a86:	d51d      	bpl.n	8002ac4 <_puts_r+0x78>
 8002a88:	6923      	ldr	r3, [r4, #16]
 8002a8a:	b1db      	cbz	r3, 8002ac4 <_puts_r+0x78>
 8002a8c:	3e01      	subs	r6, #1
 8002a8e:	68a3      	ldr	r3, [r4, #8]
 8002a90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002a94:	3b01      	subs	r3, #1
 8002a96:	60a3      	str	r3, [r4, #8]
 8002a98:	bb39      	cbnz	r1, 8002aea <_puts_r+0x9e>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da38      	bge.n	8002b10 <_puts_r+0xc4>
 8002a9e:	4622      	mov	r2, r4
 8002aa0:	210a      	movs	r1, #10
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f000 f916 	bl	8002cd4 <__swbuf_r>
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	d011      	beq.n	8002ad0 <_puts_r+0x84>
 8002aac:	250a      	movs	r5, #10
 8002aae:	e011      	b.n	8002ad4 <_puts_r+0x88>
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <_puts_r+0xd4>)
 8002ab2:	429c      	cmp	r4, r3
 8002ab4:	d101      	bne.n	8002aba <_puts_r+0x6e>
 8002ab6:	68ac      	ldr	r4, [r5, #8]
 8002ab8:	e7da      	b.n	8002a70 <_puts_r+0x24>
 8002aba:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <_puts_r+0xd8>)
 8002abc:	429c      	cmp	r4, r3
 8002abe:	bf08      	it	eq
 8002ac0:	68ec      	ldreq	r4, [r5, #12]
 8002ac2:	e7d5      	b.n	8002a70 <_puts_r+0x24>
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	f000 f956 	bl	8002d78 <__swsetup_r>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d0dd      	beq.n	8002a8c <_puts_r+0x40>
 8002ad0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ad6:	07da      	lsls	r2, r3, #31
 8002ad8:	d405      	bmi.n	8002ae6 <_puts_r+0x9a>
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	059b      	lsls	r3, r3, #22
 8002ade:	d402      	bmi.n	8002ae6 <_puts_r+0x9a>
 8002ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ae2:	f000 fb70 	bl	80031c6 <__retarget_lock_release_recursive>
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	bd70      	pop	{r4, r5, r6, pc}
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da04      	bge.n	8002af8 <_puts_r+0xac>
 8002aee:	69a2      	ldr	r2, [r4, #24]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dc06      	bgt.n	8002b02 <_puts_r+0xb6>
 8002af4:	290a      	cmp	r1, #10
 8002af6:	d004      	beq.n	8002b02 <_puts_r+0xb6>
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	6022      	str	r2, [r4, #0]
 8002afe:	7019      	strb	r1, [r3, #0]
 8002b00:	e7c5      	b.n	8002a8e <_puts_r+0x42>
 8002b02:	4622      	mov	r2, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	f000 f8e5 	bl	8002cd4 <__swbuf_r>
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	d1bf      	bne.n	8002a8e <_puts_r+0x42>
 8002b0e:	e7df      	b.n	8002ad0 <_puts_r+0x84>
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	250a      	movs	r5, #10
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	6022      	str	r2, [r4, #0]
 8002b18:	701d      	strb	r5, [r3, #0]
 8002b1a:	e7db      	b.n	8002ad4 <_puts_r+0x88>
 8002b1c:	08003c38 	.word	0x08003c38
 8002b20:	08003c58 	.word	0x08003c58
 8002b24:	08003c18 	.word	0x08003c18

08002b28 <puts>:
 8002b28:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <puts+0xc>)
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	f7ff bf8d 	b.w	8002a4c <_puts_r>
 8002b32:	bf00      	nop
 8002b34:	2000000c 	.word	0x2000000c

08002b38 <setbuf>:
 8002b38:	2900      	cmp	r1, #0
 8002b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3e:	bf0c      	ite	eq
 8002b40:	2202      	moveq	r2, #2
 8002b42:	2200      	movne	r2, #0
 8002b44:	f000 b800 	b.w	8002b48 <setvbuf>

08002b48 <setvbuf>:
 8002b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <setvbuf+0x17c>)
 8002b50:	681f      	ldr	r7, [r3, #0]
 8002b52:	4604      	mov	r4, r0
 8002b54:	460e      	mov	r6, r1
 8002b56:	4690      	mov	r8, r2
 8002b58:	b127      	cbz	r7, 8002b64 <setvbuf+0x1c>
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	b913      	cbnz	r3, 8002b64 <setvbuf+0x1c>
 8002b5e:	4638      	mov	r0, r7
 8002b60:	f000 fa92 	bl	8003088 <__sinit>
 8002b64:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <setvbuf+0x180>)
 8002b66:	429c      	cmp	r4, r3
 8002b68:	d167      	bne.n	8002c3a <setvbuf+0xf2>
 8002b6a:	687c      	ldr	r4, [r7, #4]
 8002b6c:	f1b8 0f02 	cmp.w	r8, #2
 8002b70:	d006      	beq.n	8002b80 <setvbuf+0x38>
 8002b72:	f1b8 0f01 	cmp.w	r8, #1
 8002b76:	f200 809f 	bhi.w	8002cb8 <setvbuf+0x170>
 8002b7a:	2d00      	cmp	r5, #0
 8002b7c:	f2c0 809c 	blt.w	8002cb8 <setvbuf+0x170>
 8002b80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b82:	07db      	lsls	r3, r3, #31
 8002b84:	d405      	bmi.n	8002b92 <setvbuf+0x4a>
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	0598      	lsls	r0, r3, #22
 8002b8a:	d402      	bmi.n	8002b92 <setvbuf+0x4a>
 8002b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b8e:	f000 fb19 	bl	80031c4 <__retarget_lock_acquire_recursive>
 8002b92:	4621      	mov	r1, r4
 8002b94:	4638      	mov	r0, r7
 8002b96:	f000 f9e3 	bl	8002f60 <_fflush_r>
 8002b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b9c:	b141      	cbz	r1, 8002bb0 <setvbuf+0x68>
 8002b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ba2:	4299      	cmp	r1, r3
 8002ba4:	d002      	beq.n	8002bac <setvbuf+0x64>
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	f000 fb7a 	bl	80032a0 <_free_r>
 8002bac:	2300      	movs	r3, #0
 8002bae:	6363      	str	r3, [r4, #52]	; 0x34
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61a3      	str	r3, [r4, #24]
 8002bb4:	6063      	str	r3, [r4, #4]
 8002bb6:	89a3      	ldrh	r3, [r4, #12]
 8002bb8:	0619      	lsls	r1, r3, #24
 8002bba:	d503      	bpl.n	8002bc4 <setvbuf+0x7c>
 8002bbc:	6921      	ldr	r1, [r4, #16]
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	f000 fb6e 	bl	80032a0 <_free_r>
 8002bc4:	89a3      	ldrh	r3, [r4, #12]
 8002bc6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	f1b8 0f02 	cmp.w	r8, #2
 8002bd2:	81a3      	strh	r3, [r4, #12]
 8002bd4:	d06c      	beq.n	8002cb0 <setvbuf+0x168>
 8002bd6:	ab01      	add	r3, sp, #4
 8002bd8:	466a      	mov	r2, sp
 8002bda:	4621      	mov	r1, r4
 8002bdc:	4638      	mov	r0, r7
 8002bde:	f000 faf3 	bl	80031c8 <__swhatbuf_r>
 8002be2:	89a3      	ldrh	r3, [r4, #12]
 8002be4:	4318      	orrs	r0, r3
 8002be6:	81a0      	strh	r0, [r4, #12]
 8002be8:	2d00      	cmp	r5, #0
 8002bea:	d130      	bne.n	8002c4e <setvbuf+0x106>
 8002bec:	9d00      	ldr	r5, [sp, #0]
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f000 fb4e 	bl	8003290 <malloc>
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d155      	bne.n	8002ca6 <setvbuf+0x15e>
 8002bfa:	f8dd 9000 	ldr.w	r9, [sp]
 8002bfe:	45a9      	cmp	r9, r5
 8002c00:	d14a      	bne.n	8002c98 <setvbuf+0x150>
 8002c02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002c06:	2200      	movs	r2, #0
 8002c08:	60a2      	str	r2, [r4, #8]
 8002c0a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002c0e:	6022      	str	r2, [r4, #0]
 8002c10:	6122      	str	r2, [r4, #16]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c18:	6162      	str	r2, [r4, #20]
 8002c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	07d2      	lsls	r2, r2, #31
 8002c22:	81a3      	strh	r3, [r4, #12]
 8002c24:	d405      	bmi.n	8002c32 <setvbuf+0xea>
 8002c26:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002c2a:	d102      	bne.n	8002c32 <setvbuf+0xea>
 8002c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c2e:	f000 faca 	bl	80031c6 <__retarget_lock_release_recursive>
 8002c32:	4628      	mov	r0, r5
 8002c34:	b003      	add	sp, #12
 8002c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <setvbuf+0x184>)
 8002c3c:	429c      	cmp	r4, r3
 8002c3e:	d101      	bne.n	8002c44 <setvbuf+0xfc>
 8002c40:	68bc      	ldr	r4, [r7, #8]
 8002c42:	e793      	b.n	8002b6c <setvbuf+0x24>
 8002c44:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <setvbuf+0x188>)
 8002c46:	429c      	cmp	r4, r3
 8002c48:	bf08      	it	eq
 8002c4a:	68fc      	ldreq	r4, [r7, #12]
 8002c4c:	e78e      	b.n	8002b6c <setvbuf+0x24>
 8002c4e:	2e00      	cmp	r6, #0
 8002c50:	d0cd      	beq.n	8002bee <setvbuf+0xa6>
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	b913      	cbnz	r3, 8002c5c <setvbuf+0x114>
 8002c56:	4638      	mov	r0, r7
 8002c58:	f000 fa16 	bl	8003088 <__sinit>
 8002c5c:	f1b8 0f01 	cmp.w	r8, #1
 8002c60:	bf08      	it	eq
 8002c62:	89a3      	ldrheq	r3, [r4, #12]
 8002c64:	6026      	str	r6, [r4, #0]
 8002c66:	bf04      	itt	eq
 8002c68:	f043 0301 	orreq.w	r3, r3, #1
 8002c6c:	81a3      	strheq	r3, [r4, #12]
 8002c6e:	89a2      	ldrh	r2, [r4, #12]
 8002c70:	f012 0308 	ands.w	r3, r2, #8
 8002c74:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002c78:	d01c      	beq.n	8002cb4 <setvbuf+0x16c>
 8002c7a:	07d3      	lsls	r3, r2, #31
 8002c7c:	bf41      	itttt	mi
 8002c7e:	2300      	movmi	r3, #0
 8002c80:	426d      	negmi	r5, r5
 8002c82:	60a3      	strmi	r3, [r4, #8]
 8002c84:	61a5      	strmi	r5, [r4, #24]
 8002c86:	bf58      	it	pl
 8002c88:	60a5      	strpl	r5, [r4, #8]
 8002c8a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002c8c:	f015 0501 	ands.w	r5, r5, #1
 8002c90:	d115      	bne.n	8002cbe <setvbuf+0x176>
 8002c92:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002c96:	e7c8      	b.n	8002c2a <setvbuf+0xe2>
 8002c98:	4648      	mov	r0, r9
 8002c9a:	f000 faf9 	bl	8003290 <malloc>
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d0ae      	beq.n	8002c02 <setvbuf+0xba>
 8002ca4:	464d      	mov	r5, r9
 8002ca6:	89a3      	ldrh	r3, [r4, #12]
 8002ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cac:	81a3      	strh	r3, [r4, #12]
 8002cae:	e7d0      	b.n	8002c52 <setvbuf+0x10a>
 8002cb0:	2500      	movs	r5, #0
 8002cb2:	e7a8      	b.n	8002c06 <setvbuf+0xbe>
 8002cb4:	60a3      	str	r3, [r4, #8]
 8002cb6:	e7e8      	b.n	8002c8a <setvbuf+0x142>
 8002cb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002cbc:	e7b9      	b.n	8002c32 <setvbuf+0xea>
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	e7b7      	b.n	8002c32 <setvbuf+0xea>
 8002cc2:	bf00      	nop
 8002cc4:	2000000c 	.word	0x2000000c
 8002cc8:	08003c38 	.word	0x08003c38
 8002ccc:	08003c58 	.word	0x08003c58
 8002cd0:	08003c18 	.word	0x08003c18

08002cd4 <__swbuf_r>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	460e      	mov	r6, r1
 8002cd8:	4614      	mov	r4, r2
 8002cda:	4605      	mov	r5, r0
 8002cdc:	b118      	cbz	r0, 8002ce6 <__swbuf_r+0x12>
 8002cde:	6983      	ldr	r3, [r0, #24]
 8002ce0:	b90b      	cbnz	r3, 8002ce6 <__swbuf_r+0x12>
 8002ce2:	f000 f9d1 	bl	8003088 <__sinit>
 8002ce6:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <__swbuf_r+0x98>)
 8002ce8:	429c      	cmp	r4, r3
 8002cea:	d12b      	bne.n	8002d44 <__swbuf_r+0x70>
 8002cec:	686c      	ldr	r4, [r5, #4]
 8002cee:	69a3      	ldr	r3, [r4, #24]
 8002cf0:	60a3      	str	r3, [r4, #8]
 8002cf2:	89a3      	ldrh	r3, [r4, #12]
 8002cf4:	071a      	lsls	r2, r3, #28
 8002cf6:	d52f      	bpl.n	8002d58 <__swbuf_r+0x84>
 8002cf8:	6923      	ldr	r3, [r4, #16]
 8002cfa:	b36b      	cbz	r3, 8002d58 <__swbuf_r+0x84>
 8002cfc:	6923      	ldr	r3, [r4, #16]
 8002cfe:	6820      	ldr	r0, [r4, #0]
 8002d00:	1ac0      	subs	r0, r0, r3
 8002d02:	6963      	ldr	r3, [r4, #20]
 8002d04:	b2f6      	uxtb	r6, r6
 8002d06:	4283      	cmp	r3, r0
 8002d08:	4637      	mov	r7, r6
 8002d0a:	dc04      	bgt.n	8002d16 <__swbuf_r+0x42>
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f000 f926 	bl	8002f60 <_fflush_r>
 8002d14:	bb30      	cbnz	r0, 8002d64 <__swbuf_r+0x90>
 8002d16:	68a3      	ldr	r3, [r4, #8]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	60a3      	str	r3, [r4, #8]
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	6022      	str	r2, [r4, #0]
 8002d22:	701e      	strb	r6, [r3, #0]
 8002d24:	6963      	ldr	r3, [r4, #20]
 8002d26:	3001      	adds	r0, #1
 8002d28:	4283      	cmp	r3, r0
 8002d2a:	d004      	beq.n	8002d36 <__swbuf_r+0x62>
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	07db      	lsls	r3, r3, #31
 8002d30:	d506      	bpl.n	8002d40 <__swbuf_r+0x6c>
 8002d32:	2e0a      	cmp	r6, #10
 8002d34:	d104      	bne.n	8002d40 <__swbuf_r+0x6c>
 8002d36:	4621      	mov	r1, r4
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f000 f911 	bl	8002f60 <_fflush_r>
 8002d3e:	b988      	cbnz	r0, 8002d64 <__swbuf_r+0x90>
 8002d40:	4638      	mov	r0, r7
 8002d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <__swbuf_r+0x9c>)
 8002d46:	429c      	cmp	r4, r3
 8002d48:	d101      	bne.n	8002d4e <__swbuf_r+0x7a>
 8002d4a:	68ac      	ldr	r4, [r5, #8]
 8002d4c:	e7cf      	b.n	8002cee <__swbuf_r+0x1a>
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <__swbuf_r+0xa0>)
 8002d50:	429c      	cmp	r4, r3
 8002d52:	bf08      	it	eq
 8002d54:	68ec      	ldreq	r4, [r5, #12]
 8002d56:	e7ca      	b.n	8002cee <__swbuf_r+0x1a>
 8002d58:	4621      	mov	r1, r4
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f000 f80c 	bl	8002d78 <__swsetup_r>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d0cb      	beq.n	8002cfc <__swbuf_r+0x28>
 8002d64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002d68:	e7ea      	b.n	8002d40 <__swbuf_r+0x6c>
 8002d6a:	bf00      	nop
 8002d6c:	08003c38 	.word	0x08003c38
 8002d70:	08003c58 	.word	0x08003c58
 8002d74:	08003c18 	.word	0x08003c18

08002d78 <__swsetup_r>:
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <__swsetup_r+0xcc>)
 8002d7a:	b570      	push	{r4, r5, r6, lr}
 8002d7c:	681d      	ldr	r5, [r3, #0]
 8002d7e:	4606      	mov	r6, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	b125      	cbz	r5, 8002d8e <__swsetup_r+0x16>
 8002d84:	69ab      	ldr	r3, [r5, #24]
 8002d86:	b913      	cbnz	r3, 8002d8e <__swsetup_r+0x16>
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f000 f97d 	bl	8003088 <__sinit>
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <__swsetup_r+0xd0>)
 8002d90:	429c      	cmp	r4, r3
 8002d92:	d10f      	bne.n	8002db4 <__swsetup_r+0x3c>
 8002d94:	686c      	ldr	r4, [r5, #4]
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d9c:	0719      	lsls	r1, r3, #28
 8002d9e:	d42c      	bmi.n	8002dfa <__swsetup_r+0x82>
 8002da0:	06dd      	lsls	r5, r3, #27
 8002da2:	d411      	bmi.n	8002dc8 <__swsetup_r+0x50>
 8002da4:	2309      	movs	r3, #9
 8002da6:	6033      	str	r3, [r6, #0]
 8002da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db2:	e03e      	b.n	8002e32 <__swsetup_r+0xba>
 8002db4:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <__swsetup_r+0xd4>)
 8002db6:	429c      	cmp	r4, r3
 8002db8:	d101      	bne.n	8002dbe <__swsetup_r+0x46>
 8002dba:	68ac      	ldr	r4, [r5, #8]
 8002dbc:	e7eb      	b.n	8002d96 <__swsetup_r+0x1e>
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <__swsetup_r+0xd8>)
 8002dc0:	429c      	cmp	r4, r3
 8002dc2:	bf08      	it	eq
 8002dc4:	68ec      	ldreq	r4, [r5, #12]
 8002dc6:	e7e6      	b.n	8002d96 <__swsetup_r+0x1e>
 8002dc8:	0758      	lsls	r0, r3, #29
 8002dca:	d512      	bpl.n	8002df2 <__swsetup_r+0x7a>
 8002dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dce:	b141      	cbz	r1, 8002de2 <__swsetup_r+0x6a>
 8002dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dd4:	4299      	cmp	r1, r3
 8002dd6:	d002      	beq.n	8002dde <__swsetup_r+0x66>
 8002dd8:	4630      	mov	r0, r6
 8002dda:	f000 fa61 	bl	80032a0 <_free_r>
 8002dde:	2300      	movs	r3, #0
 8002de0:	6363      	str	r3, [r4, #52]	; 0x34
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002de8:	81a3      	strh	r3, [r4, #12]
 8002dea:	2300      	movs	r3, #0
 8002dec:	6063      	str	r3, [r4, #4]
 8002dee:	6923      	ldr	r3, [r4, #16]
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	89a3      	ldrh	r3, [r4, #12]
 8002df4:	f043 0308 	orr.w	r3, r3, #8
 8002df8:	81a3      	strh	r3, [r4, #12]
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	b94b      	cbnz	r3, 8002e12 <__swsetup_r+0x9a>
 8002dfe:	89a3      	ldrh	r3, [r4, #12]
 8002e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d003      	beq.n	8002e12 <__swsetup_r+0x9a>
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f000 f9ff 	bl	8003210 <__smakebuf_r>
 8002e12:	89a0      	ldrh	r0, [r4, #12]
 8002e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e18:	f010 0301 	ands.w	r3, r0, #1
 8002e1c:	d00a      	beq.n	8002e34 <__swsetup_r+0xbc>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60a3      	str	r3, [r4, #8]
 8002e22:	6963      	ldr	r3, [r4, #20]
 8002e24:	425b      	negs	r3, r3
 8002e26:	61a3      	str	r3, [r4, #24]
 8002e28:	6923      	ldr	r3, [r4, #16]
 8002e2a:	b943      	cbnz	r3, 8002e3e <__swsetup_r+0xc6>
 8002e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e30:	d1ba      	bne.n	8002da8 <__swsetup_r+0x30>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	0781      	lsls	r1, r0, #30
 8002e36:	bf58      	it	pl
 8002e38:	6963      	ldrpl	r3, [r4, #20]
 8002e3a:	60a3      	str	r3, [r4, #8]
 8002e3c:	e7f4      	b.n	8002e28 <__swsetup_r+0xb0>
 8002e3e:	2000      	movs	r0, #0
 8002e40:	e7f7      	b.n	8002e32 <__swsetup_r+0xba>
 8002e42:	bf00      	nop
 8002e44:	2000000c 	.word	0x2000000c
 8002e48:	08003c38 	.word	0x08003c38
 8002e4c:	08003c58 	.word	0x08003c58
 8002e50:	08003c18 	.word	0x08003c18

08002e54 <__sflush_r>:
 8002e54:	898a      	ldrh	r2, [r1, #12]
 8002e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e5a:	4605      	mov	r5, r0
 8002e5c:	0710      	lsls	r0, r2, #28
 8002e5e:	460c      	mov	r4, r1
 8002e60:	d458      	bmi.n	8002f14 <__sflush_r+0xc0>
 8002e62:	684b      	ldr	r3, [r1, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dc05      	bgt.n	8002e74 <__sflush_r+0x20>
 8002e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	dc02      	bgt.n	8002e74 <__sflush_r+0x20>
 8002e6e:	2000      	movs	r0, #0
 8002e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e76:	2e00      	cmp	r6, #0
 8002e78:	d0f9      	beq.n	8002e6e <__sflush_r+0x1a>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e80:	682f      	ldr	r7, [r5, #0]
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	d032      	beq.n	8002eec <__sflush_r+0x98>
 8002e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	075a      	lsls	r2, r3, #29
 8002e8c:	d505      	bpl.n	8002e9a <__sflush_r+0x46>
 8002e8e:	6863      	ldr	r3, [r4, #4]
 8002e90:	1ac0      	subs	r0, r0, r3
 8002e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e94:	b10b      	cbz	r3, 8002e9a <__sflush_r+0x46>
 8002e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e98:	1ac0      	subs	r0, r0, r3
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ea0:	6a21      	ldr	r1, [r4, #32]
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	47b0      	blx	r6
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	89a3      	ldrh	r3, [r4, #12]
 8002eaa:	d106      	bne.n	8002eba <__sflush_r+0x66>
 8002eac:	6829      	ldr	r1, [r5, #0]
 8002eae:	291d      	cmp	r1, #29
 8002eb0:	d82c      	bhi.n	8002f0c <__sflush_r+0xb8>
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <__sflush_r+0x108>)
 8002eb4:	40ca      	lsrs	r2, r1
 8002eb6:	07d6      	lsls	r6, r2, #31
 8002eb8:	d528      	bpl.n	8002f0c <__sflush_r+0xb8>
 8002eba:	2200      	movs	r2, #0
 8002ebc:	6062      	str	r2, [r4, #4]
 8002ebe:	04d9      	lsls	r1, r3, #19
 8002ec0:	6922      	ldr	r2, [r4, #16]
 8002ec2:	6022      	str	r2, [r4, #0]
 8002ec4:	d504      	bpl.n	8002ed0 <__sflush_r+0x7c>
 8002ec6:	1c42      	adds	r2, r0, #1
 8002ec8:	d101      	bne.n	8002ece <__sflush_r+0x7a>
 8002eca:	682b      	ldr	r3, [r5, #0]
 8002ecc:	b903      	cbnz	r3, 8002ed0 <__sflush_r+0x7c>
 8002ece:	6560      	str	r0, [r4, #84]	; 0x54
 8002ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ed2:	602f      	str	r7, [r5, #0]
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d0ca      	beq.n	8002e6e <__sflush_r+0x1a>
 8002ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002edc:	4299      	cmp	r1, r3
 8002ede:	d002      	beq.n	8002ee6 <__sflush_r+0x92>
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f000 f9dd 	bl	80032a0 <_free_r>
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8002eea:	e7c1      	b.n	8002e70 <__sflush_r+0x1c>
 8002eec:	6a21      	ldr	r1, [r4, #32]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	47b0      	blx	r6
 8002ef4:	1c41      	adds	r1, r0, #1
 8002ef6:	d1c7      	bne.n	8002e88 <__sflush_r+0x34>
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0c4      	beq.n	8002e88 <__sflush_r+0x34>
 8002efe:	2b1d      	cmp	r3, #29
 8002f00:	d001      	beq.n	8002f06 <__sflush_r+0xb2>
 8002f02:	2b16      	cmp	r3, #22
 8002f04:	d101      	bne.n	8002f0a <__sflush_r+0xb6>
 8002f06:	602f      	str	r7, [r5, #0]
 8002f08:	e7b1      	b.n	8002e6e <__sflush_r+0x1a>
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f10:	81a3      	strh	r3, [r4, #12]
 8002f12:	e7ad      	b.n	8002e70 <__sflush_r+0x1c>
 8002f14:	690f      	ldr	r7, [r1, #16]
 8002f16:	2f00      	cmp	r7, #0
 8002f18:	d0a9      	beq.n	8002e6e <__sflush_r+0x1a>
 8002f1a:	0793      	lsls	r3, r2, #30
 8002f1c:	680e      	ldr	r6, [r1, #0]
 8002f1e:	bf08      	it	eq
 8002f20:	694b      	ldreq	r3, [r1, #20]
 8002f22:	600f      	str	r7, [r1, #0]
 8002f24:	bf18      	it	ne
 8002f26:	2300      	movne	r3, #0
 8002f28:	eba6 0807 	sub.w	r8, r6, r7
 8002f2c:	608b      	str	r3, [r1, #8]
 8002f2e:	f1b8 0f00 	cmp.w	r8, #0
 8002f32:	dd9c      	ble.n	8002e6e <__sflush_r+0x1a>
 8002f34:	6a21      	ldr	r1, [r4, #32]
 8002f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f38:	4643      	mov	r3, r8
 8002f3a:	463a      	mov	r2, r7
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	47b0      	blx	r6
 8002f40:	2800      	cmp	r0, #0
 8002f42:	dc06      	bgt.n	8002f52 <__sflush_r+0xfe>
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f4a:	81a3      	strh	r3, [r4, #12]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f50:	e78e      	b.n	8002e70 <__sflush_r+0x1c>
 8002f52:	4407      	add	r7, r0
 8002f54:	eba8 0800 	sub.w	r8, r8, r0
 8002f58:	e7e9      	b.n	8002f2e <__sflush_r+0xda>
 8002f5a:	bf00      	nop
 8002f5c:	20400001 	.word	0x20400001

08002f60 <_fflush_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	690b      	ldr	r3, [r1, #16]
 8002f64:	4605      	mov	r5, r0
 8002f66:	460c      	mov	r4, r1
 8002f68:	b913      	cbnz	r3, 8002f70 <_fflush_r+0x10>
 8002f6a:	2500      	movs	r5, #0
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	b118      	cbz	r0, 8002f7a <_fflush_r+0x1a>
 8002f72:	6983      	ldr	r3, [r0, #24]
 8002f74:	b90b      	cbnz	r3, 8002f7a <_fflush_r+0x1a>
 8002f76:	f000 f887 	bl	8003088 <__sinit>
 8002f7a:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <_fflush_r+0x6c>)
 8002f7c:	429c      	cmp	r4, r3
 8002f7e:	d11b      	bne.n	8002fb8 <_fflush_r+0x58>
 8002f80:	686c      	ldr	r4, [r5, #4]
 8002f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ef      	beq.n	8002f6a <_fflush_r+0xa>
 8002f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f8c:	07d0      	lsls	r0, r2, #31
 8002f8e:	d404      	bmi.n	8002f9a <_fflush_r+0x3a>
 8002f90:	0599      	lsls	r1, r3, #22
 8002f92:	d402      	bmi.n	8002f9a <_fflush_r+0x3a>
 8002f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f96:	f000 f915 	bl	80031c4 <__retarget_lock_acquire_recursive>
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	f7ff ff59 	bl	8002e54 <__sflush_r>
 8002fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fa4:	07da      	lsls	r2, r3, #31
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	d4e0      	bmi.n	8002f6c <_fflush_r+0xc>
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	059b      	lsls	r3, r3, #22
 8002fae:	d4dd      	bmi.n	8002f6c <_fflush_r+0xc>
 8002fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fb2:	f000 f908 	bl	80031c6 <__retarget_lock_release_recursive>
 8002fb6:	e7d9      	b.n	8002f6c <_fflush_r+0xc>
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <_fflush_r+0x70>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d101      	bne.n	8002fc2 <_fflush_r+0x62>
 8002fbe:	68ac      	ldr	r4, [r5, #8]
 8002fc0:	e7df      	b.n	8002f82 <_fflush_r+0x22>
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <_fflush_r+0x74>)
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	bf08      	it	eq
 8002fc8:	68ec      	ldreq	r4, [r5, #12]
 8002fca:	e7da      	b.n	8002f82 <_fflush_r+0x22>
 8002fcc:	08003c38 	.word	0x08003c38
 8002fd0:	08003c58 	.word	0x08003c58
 8002fd4:	08003c18 	.word	0x08003c18

08002fd8 <std>:
 8002fd8:	2300      	movs	r3, #0
 8002fda:	b510      	push	{r4, lr}
 8002fdc:	4604      	mov	r4, r0
 8002fde:	e9c0 3300 	strd	r3, r3, [r0]
 8002fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fe6:	6083      	str	r3, [r0, #8]
 8002fe8:	8181      	strh	r1, [r0, #12]
 8002fea:	6643      	str	r3, [r0, #100]	; 0x64
 8002fec:	81c2      	strh	r2, [r0, #14]
 8002fee:	6183      	str	r3, [r0, #24]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	2208      	movs	r2, #8
 8002ff4:	305c      	adds	r0, #92	; 0x5c
 8002ff6:	f7ff fd09 	bl	8002a0c <memset>
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <std+0x38>)
 8002ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <std+0x3c>)
 8003000:	62a3      	str	r3, [r4, #40]	; 0x28
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <std+0x40>)
 8003004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <std+0x44>)
 8003008:	6224      	str	r4, [r4, #32]
 800300a:	6323      	str	r3, [r4, #48]	; 0x30
 800300c:	bd10      	pop	{r4, pc}
 800300e:	bf00      	nop
 8003010:	080039f1 	.word	0x080039f1
 8003014:	08003a13 	.word	0x08003a13
 8003018:	08003a4b 	.word	0x08003a4b
 800301c:	08003a6f 	.word	0x08003a6f

08003020 <_cleanup_r>:
 8003020:	4901      	ldr	r1, [pc, #4]	; (8003028 <_cleanup_r+0x8>)
 8003022:	f000 b8af 	b.w	8003184 <_fwalk_reent>
 8003026:	bf00      	nop
 8003028:	08002f61 	.word	0x08002f61

0800302c <__sfmoreglue>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	1e4a      	subs	r2, r1, #1
 8003030:	2568      	movs	r5, #104	; 0x68
 8003032:	4355      	muls	r5, r2
 8003034:	460e      	mov	r6, r1
 8003036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800303a:	f000 f981 	bl	8003340 <_malloc_r>
 800303e:	4604      	mov	r4, r0
 8003040:	b140      	cbz	r0, 8003054 <__sfmoreglue+0x28>
 8003042:	2100      	movs	r1, #0
 8003044:	e9c0 1600 	strd	r1, r6, [r0]
 8003048:	300c      	adds	r0, #12
 800304a:	60a0      	str	r0, [r4, #8]
 800304c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003050:	f7ff fcdc 	bl	8002a0c <memset>
 8003054:	4620      	mov	r0, r4
 8003056:	bd70      	pop	{r4, r5, r6, pc}

08003058 <__sfp_lock_acquire>:
 8003058:	4801      	ldr	r0, [pc, #4]	; (8003060 <__sfp_lock_acquire+0x8>)
 800305a:	f000 b8b3 	b.w	80031c4 <__retarget_lock_acquire_recursive>
 800305e:	bf00      	nop
 8003060:	20000148 	.word	0x20000148

08003064 <__sfp_lock_release>:
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <__sfp_lock_release+0x8>)
 8003066:	f000 b8ae 	b.w	80031c6 <__retarget_lock_release_recursive>
 800306a:	bf00      	nop
 800306c:	20000148 	.word	0x20000148

08003070 <__sinit_lock_acquire>:
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <__sinit_lock_acquire+0x8>)
 8003072:	f000 b8a7 	b.w	80031c4 <__retarget_lock_acquire_recursive>
 8003076:	bf00      	nop
 8003078:	20000143 	.word	0x20000143

0800307c <__sinit_lock_release>:
 800307c:	4801      	ldr	r0, [pc, #4]	; (8003084 <__sinit_lock_release+0x8>)
 800307e:	f000 b8a2 	b.w	80031c6 <__retarget_lock_release_recursive>
 8003082:	bf00      	nop
 8003084:	20000143 	.word	0x20000143

08003088 <__sinit>:
 8003088:	b510      	push	{r4, lr}
 800308a:	4604      	mov	r4, r0
 800308c:	f7ff fff0 	bl	8003070 <__sinit_lock_acquire>
 8003090:	69a3      	ldr	r3, [r4, #24]
 8003092:	b11b      	cbz	r3, 800309c <__sinit+0x14>
 8003094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003098:	f7ff bff0 	b.w	800307c <__sinit_lock_release>
 800309c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80030a0:	6523      	str	r3, [r4, #80]	; 0x50
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <__sinit+0x68>)
 80030a4:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <__sinit+0x6c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80030aa:	42a3      	cmp	r3, r4
 80030ac:	bf04      	itt	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	61a3      	streq	r3, [r4, #24]
 80030b2:	4620      	mov	r0, r4
 80030b4:	f000 f820 	bl	80030f8 <__sfp>
 80030b8:	6060      	str	r0, [r4, #4]
 80030ba:	4620      	mov	r0, r4
 80030bc:	f000 f81c 	bl	80030f8 <__sfp>
 80030c0:	60a0      	str	r0, [r4, #8]
 80030c2:	4620      	mov	r0, r4
 80030c4:	f000 f818 	bl	80030f8 <__sfp>
 80030c8:	2200      	movs	r2, #0
 80030ca:	60e0      	str	r0, [r4, #12]
 80030cc:	2104      	movs	r1, #4
 80030ce:	6860      	ldr	r0, [r4, #4]
 80030d0:	f7ff ff82 	bl	8002fd8 <std>
 80030d4:	68a0      	ldr	r0, [r4, #8]
 80030d6:	2201      	movs	r2, #1
 80030d8:	2109      	movs	r1, #9
 80030da:	f7ff ff7d 	bl	8002fd8 <std>
 80030de:	68e0      	ldr	r0, [r4, #12]
 80030e0:	2202      	movs	r2, #2
 80030e2:	2112      	movs	r1, #18
 80030e4:	f7ff ff78 	bl	8002fd8 <std>
 80030e8:	2301      	movs	r3, #1
 80030ea:	61a3      	str	r3, [r4, #24]
 80030ec:	e7d2      	b.n	8003094 <__sinit+0xc>
 80030ee:	bf00      	nop
 80030f0:	08003c14 	.word	0x08003c14
 80030f4:	08003021 	.word	0x08003021

080030f8 <__sfp>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	4607      	mov	r7, r0
 80030fc:	f7ff ffac 	bl	8003058 <__sfp_lock_acquire>
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <__sfp+0x84>)
 8003102:	681e      	ldr	r6, [r3, #0]
 8003104:	69b3      	ldr	r3, [r6, #24]
 8003106:	b913      	cbnz	r3, 800310e <__sfp+0x16>
 8003108:	4630      	mov	r0, r6
 800310a:	f7ff ffbd 	bl	8003088 <__sinit>
 800310e:	3648      	adds	r6, #72	; 0x48
 8003110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003114:	3b01      	subs	r3, #1
 8003116:	d503      	bpl.n	8003120 <__sfp+0x28>
 8003118:	6833      	ldr	r3, [r6, #0]
 800311a:	b30b      	cbz	r3, 8003160 <__sfp+0x68>
 800311c:	6836      	ldr	r6, [r6, #0]
 800311e:	e7f7      	b.n	8003110 <__sfp+0x18>
 8003120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003124:	b9d5      	cbnz	r5, 800315c <__sfp+0x64>
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <__sfp+0x88>)
 8003128:	60e3      	str	r3, [r4, #12]
 800312a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800312e:	6665      	str	r5, [r4, #100]	; 0x64
 8003130:	f000 f847 	bl	80031c2 <__retarget_lock_init_recursive>
 8003134:	f7ff ff96 	bl	8003064 <__sfp_lock_release>
 8003138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800313c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003140:	6025      	str	r5, [r4, #0]
 8003142:	61a5      	str	r5, [r4, #24]
 8003144:	2208      	movs	r2, #8
 8003146:	4629      	mov	r1, r5
 8003148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800314c:	f7ff fc5e 	bl	8002a0c <memset>
 8003150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003158:	4620      	mov	r0, r4
 800315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800315c:	3468      	adds	r4, #104	; 0x68
 800315e:	e7d9      	b.n	8003114 <__sfp+0x1c>
 8003160:	2104      	movs	r1, #4
 8003162:	4638      	mov	r0, r7
 8003164:	f7ff ff62 	bl	800302c <__sfmoreglue>
 8003168:	4604      	mov	r4, r0
 800316a:	6030      	str	r0, [r6, #0]
 800316c:	2800      	cmp	r0, #0
 800316e:	d1d5      	bne.n	800311c <__sfp+0x24>
 8003170:	f7ff ff78 	bl	8003064 <__sfp_lock_release>
 8003174:	230c      	movs	r3, #12
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	e7ee      	b.n	8003158 <__sfp+0x60>
 800317a:	bf00      	nop
 800317c:	08003c14 	.word	0x08003c14
 8003180:	ffff0001 	.word	0xffff0001

08003184 <_fwalk_reent>:
 8003184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003188:	4606      	mov	r6, r0
 800318a:	4688      	mov	r8, r1
 800318c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003190:	2700      	movs	r7, #0
 8003192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003196:	f1b9 0901 	subs.w	r9, r9, #1
 800319a:	d505      	bpl.n	80031a8 <_fwalk_reent+0x24>
 800319c:	6824      	ldr	r4, [r4, #0]
 800319e:	2c00      	cmp	r4, #0
 80031a0:	d1f7      	bne.n	8003192 <_fwalk_reent+0xe>
 80031a2:	4638      	mov	r0, r7
 80031a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031a8:	89ab      	ldrh	r3, [r5, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d907      	bls.n	80031be <_fwalk_reent+0x3a>
 80031ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031b2:	3301      	adds	r3, #1
 80031b4:	d003      	beq.n	80031be <_fwalk_reent+0x3a>
 80031b6:	4629      	mov	r1, r5
 80031b8:	4630      	mov	r0, r6
 80031ba:	47c0      	blx	r8
 80031bc:	4307      	orrs	r7, r0
 80031be:	3568      	adds	r5, #104	; 0x68
 80031c0:	e7e9      	b.n	8003196 <_fwalk_reent+0x12>

080031c2 <__retarget_lock_init_recursive>:
 80031c2:	4770      	bx	lr

080031c4 <__retarget_lock_acquire_recursive>:
 80031c4:	4770      	bx	lr

080031c6 <__retarget_lock_release_recursive>:
 80031c6:	4770      	bx	lr

080031c8 <__swhatbuf_r>:
 80031c8:	b570      	push	{r4, r5, r6, lr}
 80031ca:	460e      	mov	r6, r1
 80031cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d0:	2900      	cmp	r1, #0
 80031d2:	b096      	sub	sp, #88	; 0x58
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	da07      	bge.n	80031ea <__swhatbuf_r+0x22>
 80031da:	2300      	movs	r3, #0
 80031dc:	602b      	str	r3, [r5, #0]
 80031de:	89b3      	ldrh	r3, [r6, #12]
 80031e0:	061a      	lsls	r2, r3, #24
 80031e2:	d410      	bmi.n	8003206 <__swhatbuf_r+0x3e>
 80031e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e8:	e00e      	b.n	8003208 <__swhatbuf_r+0x40>
 80031ea:	466a      	mov	r2, sp
 80031ec:	f000 fc66 	bl	8003abc <_fstat_r>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	dbf2      	blt.n	80031da <__swhatbuf_r+0x12>
 80031f4:	9a01      	ldr	r2, [sp, #4]
 80031f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031fe:	425a      	negs	r2, r3
 8003200:	415a      	adcs	r2, r3
 8003202:	602a      	str	r2, [r5, #0]
 8003204:	e7ee      	b.n	80031e4 <__swhatbuf_r+0x1c>
 8003206:	2340      	movs	r3, #64	; 0x40
 8003208:	2000      	movs	r0, #0
 800320a:	6023      	str	r3, [r4, #0]
 800320c:	b016      	add	sp, #88	; 0x58
 800320e:	bd70      	pop	{r4, r5, r6, pc}

08003210 <__smakebuf_r>:
 8003210:	898b      	ldrh	r3, [r1, #12]
 8003212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003214:	079d      	lsls	r5, r3, #30
 8003216:	4606      	mov	r6, r0
 8003218:	460c      	mov	r4, r1
 800321a:	d507      	bpl.n	800322c <__smakebuf_r+0x1c>
 800321c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	6123      	str	r3, [r4, #16]
 8003224:	2301      	movs	r3, #1
 8003226:	6163      	str	r3, [r4, #20]
 8003228:	b002      	add	sp, #8
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	ab01      	add	r3, sp, #4
 800322e:	466a      	mov	r2, sp
 8003230:	f7ff ffca 	bl	80031c8 <__swhatbuf_r>
 8003234:	9900      	ldr	r1, [sp, #0]
 8003236:	4605      	mov	r5, r0
 8003238:	4630      	mov	r0, r6
 800323a:	f000 f881 	bl	8003340 <_malloc_r>
 800323e:	b948      	cbnz	r0, 8003254 <__smakebuf_r+0x44>
 8003240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003244:	059a      	lsls	r2, r3, #22
 8003246:	d4ef      	bmi.n	8003228 <__smakebuf_r+0x18>
 8003248:	f023 0303 	bic.w	r3, r3, #3
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	81a3      	strh	r3, [r4, #12]
 8003252:	e7e3      	b.n	800321c <__smakebuf_r+0xc>
 8003254:	4b0d      	ldr	r3, [pc, #52]	; (800328c <__smakebuf_r+0x7c>)
 8003256:	62b3      	str	r3, [r6, #40]	; 0x28
 8003258:	89a3      	ldrh	r3, [r4, #12]
 800325a:	6020      	str	r0, [r4, #0]
 800325c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003260:	81a3      	strh	r3, [r4, #12]
 8003262:	9b00      	ldr	r3, [sp, #0]
 8003264:	6163      	str	r3, [r4, #20]
 8003266:	9b01      	ldr	r3, [sp, #4]
 8003268:	6120      	str	r0, [r4, #16]
 800326a:	b15b      	cbz	r3, 8003284 <__smakebuf_r+0x74>
 800326c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003270:	4630      	mov	r0, r6
 8003272:	f000 fc35 	bl	8003ae0 <_isatty_r>
 8003276:	b128      	cbz	r0, 8003284 <__smakebuf_r+0x74>
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	89a0      	ldrh	r0, [r4, #12]
 8003286:	4305      	orrs	r5, r0
 8003288:	81a5      	strh	r5, [r4, #12]
 800328a:	e7cd      	b.n	8003228 <__smakebuf_r+0x18>
 800328c:	08003021 	.word	0x08003021

08003290 <malloc>:
 8003290:	4b02      	ldr	r3, [pc, #8]	; (800329c <malloc+0xc>)
 8003292:	4601      	mov	r1, r0
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	f000 b853 	b.w	8003340 <_malloc_r>
 800329a:	bf00      	nop
 800329c:	2000000c 	.word	0x2000000c

080032a0 <_free_r>:
 80032a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032a2:	2900      	cmp	r1, #0
 80032a4:	d048      	beq.n	8003338 <_free_r+0x98>
 80032a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032aa:	9001      	str	r0, [sp, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f1a1 0404 	sub.w	r4, r1, #4
 80032b2:	bfb8      	it	lt
 80032b4:	18e4      	addlt	r4, r4, r3
 80032b6:	f000 fc35 	bl	8003b24 <__malloc_lock>
 80032ba:	4a20      	ldr	r2, [pc, #128]	; (800333c <_free_r+0x9c>)
 80032bc:	9801      	ldr	r0, [sp, #4]
 80032be:	6813      	ldr	r3, [r2, #0]
 80032c0:	4615      	mov	r5, r2
 80032c2:	b933      	cbnz	r3, 80032d2 <_free_r+0x32>
 80032c4:	6063      	str	r3, [r4, #4]
 80032c6:	6014      	str	r4, [r2, #0]
 80032c8:	b003      	add	sp, #12
 80032ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032ce:	f000 bc2f 	b.w	8003b30 <__malloc_unlock>
 80032d2:	42a3      	cmp	r3, r4
 80032d4:	d90b      	bls.n	80032ee <_free_r+0x4e>
 80032d6:	6821      	ldr	r1, [r4, #0]
 80032d8:	1862      	adds	r2, r4, r1
 80032da:	4293      	cmp	r3, r2
 80032dc:	bf04      	itt	eq
 80032de:	681a      	ldreq	r2, [r3, #0]
 80032e0:	685b      	ldreq	r3, [r3, #4]
 80032e2:	6063      	str	r3, [r4, #4]
 80032e4:	bf04      	itt	eq
 80032e6:	1852      	addeq	r2, r2, r1
 80032e8:	6022      	streq	r2, [r4, #0]
 80032ea:	602c      	str	r4, [r5, #0]
 80032ec:	e7ec      	b.n	80032c8 <_free_r+0x28>
 80032ee:	461a      	mov	r2, r3
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	b10b      	cbz	r3, 80032f8 <_free_r+0x58>
 80032f4:	42a3      	cmp	r3, r4
 80032f6:	d9fa      	bls.n	80032ee <_free_r+0x4e>
 80032f8:	6811      	ldr	r1, [r2, #0]
 80032fa:	1855      	adds	r5, r2, r1
 80032fc:	42a5      	cmp	r5, r4
 80032fe:	d10b      	bne.n	8003318 <_free_r+0x78>
 8003300:	6824      	ldr	r4, [r4, #0]
 8003302:	4421      	add	r1, r4
 8003304:	1854      	adds	r4, r2, r1
 8003306:	42a3      	cmp	r3, r4
 8003308:	6011      	str	r1, [r2, #0]
 800330a:	d1dd      	bne.n	80032c8 <_free_r+0x28>
 800330c:	681c      	ldr	r4, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	6053      	str	r3, [r2, #4]
 8003312:	4421      	add	r1, r4
 8003314:	6011      	str	r1, [r2, #0]
 8003316:	e7d7      	b.n	80032c8 <_free_r+0x28>
 8003318:	d902      	bls.n	8003320 <_free_r+0x80>
 800331a:	230c      	movs	r3, #12
 800331c:	6003      	str	r3, [r0, #0]
 800331e:	e7d3      	b.n	80032c8 <_free_r+0x28>
 8003320:	6825      	ldr	r5, [r4, #0]
 8003322:	1961      	adds	r1, r4, r5
 8003324:	428b      	cmp	r3, r1
 8003326:	bf04      	itt	eq
 8003328:	6819      	ldreq	r1, [r3, #0]
 800332a:	685b      	ldreq	r3, [r3, #4]
 800332c:	6063      	str	r3, [r4, #4]
 800332e:	bf04      	itt	eq
 8003330:	1949      	addeq	r1, r1, r5
 8003332:	6021      	streq	r1, [r4, #0]
 8003334:	6054      	str	r4, [r2, #4]
 8003336:	e7c7      	b.n	80032c8 <_free_r+0x28>
 8003338:	b003      	add	sp, #12
 800333a:	bd30      	pop	{r4, r5, pc}
 800333c:	200000a0 	.word	0x200000a0

08003340 <_malloc_r>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	1ccd      	adds	r5, r1, #3
 8003344:	f025 0503 	bic.w	r5, r5, #3
 8003348:	3508      	adds	r5, #8
 800334a:	2d0c      	cmp	r5, #12
 800334c:	bf38      	it	cc
 800334e:	250c      	movcc	r5, #12
 8003350:	2d00      	cmp	r5, #0
 8003352:	4606      	mov	r6, r0
 8003354:	db01      	blt.n	800335a <_malloc_r+0x1a>
 8003356:	42a9      	cmp	r1, r5
 8003358:	d903      	bls.n	8003362 <_malloc_r+0x22>
 800335a:	230c      	movs	r3, #12
 800335c:	6033      	str	r3, [r6, #0]
 800335e:	2000      	movs	r0, #0
 8003360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003362:	f000 fbdf 	bl	8003b24 <__malloc_lock>
 8003366:	4921      	ldr	r1, [pc, #132]	; (80033ec <_malloc_r+0xac>)
 8003368:	680a      	ldr	r2, [r1, #0]
 800336a:	4614      	mov	r4, r2
 800336c:	b99c      	cbnz	r4, 8003396 <_malloc_r+0x56>
 800336e:	4f20      	ldr	r7, [pc, #128]	; (80033f0 <_malloc_r+0xb0>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b923      	cbnz	r3, 800337e <_malloc_r+0x3e>
 8003374:	4621      	mov	r1, r4
 8003376:	4630      	mov	r0, r6
 8003378:	f000 fb2a 	bl	80039d0 <_sbrk_r>
 800337c:	6038      	str	r0, [r7, #0]
 800337e:	4629      	mov	r1, r5
 8003380:	4630      	mov	r0, r6
 8003382:	f000 fb25 	bl	80039d0 <_sbrk_r>
 8003386:	1c43      	adds	r3, r0, #1
 8003388:	d123      	bne.n	80033d2 <_malloc_r+0x92>
 800338a:	230c      	movs	r3, #12
 800338c:	6033      	str	r3, [r6, #0]
 800338e:	4630      	mov	r0, r6
 8003390:	f000 fbce 	bl	8003b30 <__malloc_unlock>
 8003394:	e7e3      	b.n	800335e <_malloc_r+0x1e>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	1b5b      	subs	r3, r3, r5
 800339a:	d417      	bmi.n	80033cc <_malloc_r+0x8c>
 800339c:	2b0b      	cmp	r3, #11
 800339e:	d903      	bls.n	80033a8 <_malloc_r+0x68>
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	441c      	add	r4, r3
 80033a4:	6025      	str	r5, [r4, #0]
 80033a6:	e004      	b.n	80033b2 <_malloc_r+0x72>
 80033a8:	6863      	ldr	r3, [r4, #4]
 80033aa:	42a2      	cmp	r2, r4
 80033ac:	bf0c      	ite	eq
 80033ae:	600b      	streq	r3, [r1, #0]
 80033b0:	6053      	strne	r3, [r2, #4]
 80033b2:	4630      	mov	r0, r6
 80033b4:	f000 fbbc 	bl	8003b30 <__malloc_unlock>
 80033b8:	f104 000b 	add.w	r0, r4, #11
 80033bc:	1d23      	adds	r3, r4, #4
 80033be:	f020 0007 	bic.w	r0, r0, #7
 80033c2:	1ac2      	subs	r2, r0, r3
 80033c4:	d0cc      	beq.n	8003360 <_malloc_r+0x20>
 80033c6:	1a1b      	subs	r3, r3, r0
 80033c8:	50a3      	str	r3, [r4, r2]
 80033ca:	e7c9      	b.n	8003360 <_malloc_r+0x20>
 80033cc:	4622      	mov	r2, r4
 80033ce:	6864      	ldr	r4, [r4, #4]
 80033d0:	e7cc      	b.n	800336c <_malloc_r+0x2c>
 80033d2:	1cc4      	adds	r4, r0, #3
 80033d4:	f024 0403 	bic.w	r4, r4, #3
 80033d8:	42a0      	cmp	r0, r4
 80033da:	d0e3      	beq.n	80033a4 <_malloc_r+0x64>
 80033dc:	1a21      	subs	r1, r4, r0
 80033de:	4630      	mov	r0, r6
 80033e0:	f000 faf6 	bl	80039d0 <_sbrk_r>
 80033e4:	3001      	adds	r0, #1
 80033e6:	d1dd      	bne.n	80033a4 <_malloc_r+0x64>
 80033e8:	e7cf      	b.n	800338a <_malloc_r+0x4a>
 80033ea:	bf00      	nop
 80033ec:	200000a0 	.word	0x200000a0
 80033f0:	200000a4 	.word	0x200000a4

080033f4 <__sfputc_r>:
 80033f4:	6893      	ldr	r3, [r2, #8]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	b410      	push	{r4}
 80033fc:	6093      	str	r3, [r2, #8]
 80033fe:	da08      	bge.n	8003412 <__sfputc_r+0x1e>
 8003400:	6994      	ldr	r4, [r2, #24]
 8003402:	42a3      	cmp	r3, r4
 8003404:	db01      	blt.n	800340a <__sfputc_r+0x16>
 8003406:	290a      	cmp	r1, #10
 8003408:	d103      	bne.n	8003412 <__sfputc_r+0x1e>
 800340a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800340e:	f7ff bc61 	b.w	8002cd4 <__swbuf_r>
 8003412:	6813      	ldr	r3, [r2, #0]
 8003414:	1c58      	adds	r0, r3, #1
 8003416:	6010      	str	r0, [r2, #0]
 8003418:	7019      	strb	r1, [r3, #0]
 800341a:	4608      	mov	r0, r1
 800341c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003420:	4770      	bx	lr

08003422 <__sfputs_r>:
 8003422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003424:	4606      	mov	r6, r0
 8003426:	460f      	mov	r7, r1
 8003428:	4614      	mov	r4, r2
 800342a:	18d5      	adds	r5, r2, r3
 800342c:	42ac      	cmp	r4, r5
 800342e:	d101      	bne.n	8003434 <__sfputs_r+0x12>
 8003430:	2000      	movs	r0, #0
 8003432:	e007      	b.n	8003444 <__sfputs_r+0x22>
 8003434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003438:	463a      	mov	r2, r7
 800343a:	4630      	mov	r0, r6
 800343c:	f7ff ffda 	bl	80033f4 <__sfputc_r>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d1f3      	bne.n	800342c <__sfputs_r+0xa>
 8003444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003448 <_vfiprintf_r>:
 8003448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344c:	460d      	mov	r5, r1
 800344e:	b09d      	sub	sp, #116	; 0x74
 8003450:	4614      	mov	r4, r2
 8003452:	4698      	mov	r8, r3
 8003454:	4606      	mov	r6, r0
 8003456:	b118      	cbz	r0, 8003460 <_vfiprintf_r+0x18>
 8003458:	6983      	ldr	r3, [r0, #24]
 800345a:	b90b      	cbnz	r3, 8003460 <_vfiprintf_r+0x18>
 800345c:	f7ff fe14 	bl	8003088 <__sinit>
 8003460:	4b89      	ldr	r3, [pc, #548]	; (8003688 <_vfiprintf_r+0x240>)
 8003462:	429d      	cmp	r5, r3
 8003464:	d11b      	bne.n	800349e <_vfiprintf_r+0x56>
 8003466:	6875      	ldr	r5, [r6, #4]
 8003468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800346a:	07d9      	lsls	r1, r3, #31
 800346c:	d405      	bmi.n	800347a <_vfiprintf_r+0x32>
 800346e:	89ab      	ldrh	r3, [r5, #12]
 8003470:	059a      	lsls	r2, r3, #22
 8003472:	d402      	bmi.n	800347a <_vfiprintf_r+0x32>
 8003474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003476:	f7ff fea5 	bl	80031c4 <__retarget_lock_acquire_recursive>
 800347a:	89ab      	ldrh	r3, [r5, #12]
 800347c:	071b      	lsls	r3, r3, #28
 800347e:	d501      	bpl.n	8003484 <_vfiprintf_r+0x3c>
 8003480:	692b      	ldr	r3, [r5, #16]
 8003482:	b9eb      	cbnz	r3, 80034c0 <_vfiprintf_r+0x78>
 8003484:	4629      	mov	r1, r5
 8003486:	4630      	mov	r0, r6
 8003488:	f7ff fc76 	bl	8002d78 <__swsetup_r>
 800348c:	b1c0      	cbz	r0, 80034c0 <_vfiprintf_r+0x78>
 800348e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003490:	07dc      	lsls	r4, r3, #31
 8003492:	d50e      	bpl.n	80034b2 <_vfiprintf_r+0x6a>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003498:	b01d      	add	sp, #116	; 0x74
 800349a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349e:	4b7b      	ldr	r3, [pc, #492]	; (800368c <_vfiprintf_r+0x244>)
 80034a0:	429d      	cmp	r5, r3
 80034a2:	d101      	bne.n	80034a8 <_vfiprintf_r+0x60>
 80034a4:	68b5      	ldr	r5, [r6, #8]
 80034a6:	e7df      	b.n	8003468 <_vfiprintf_r+0x20>
 80034a8:	4b79      	ldr	r3, [pc, #484]	; (8003690 <_vfiprintf_r+0x248>)
 80034aa:	429d      	cmp	r5, r3
 80034ac:	bf08      	it	eq
 80034ae:	68f5      	ldreq	r5, [r6, #12]
 80034b0:	e7da      	b.n	8003468 <_vfiprintf_r+0x20>
 80034b2:	89ab      	ldrh	r3, [r5, #12]
 80034b4:	0598      	lsls	r0, r3, #22
 80034b6:	d4ed      	bmi.n	8003494 <_vfiprintf_r+0x4c>
 80034b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034ba:	f7ff fe84 	bl	80031c6 <__retarget_lock_release_recursive>
 80034be:	e7e9      	b.n	8003494 <_vfiprintf_r+0x4c>
 80034c0:	2300      	movs	r3, #0
 80034c2:	9309      	str	r3, [sp, #36]	; 0x24
 80034c4:	2320      	movs	r3, #32
 80034c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ce:	2330      	movs	r3, #48	; 0x30
 80034d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003694 <_vfiprintf_r+0x24c>
 80034d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034d8:	f04f 0901 	mov.w	r9, #1
 80034dc:	4623      	mov	r3, r4
 80034de:	469a      	mov	sl, r3
 80034e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034e4:	b10a      	cbz	r2, 80034ea <_vfiprintf_r+0xa2>
 80034e6:	2a25      	cmp	r2, #37	; 0x25
 80034e8:	d1f9      	bne.n	80034de <_vfiprintf_r+0x96>
 80034ea:	ebba 0b04 	subs.w	fp, sl, r4
 80034ee:	d00b      	beq.n	8003508 <_vfiprintf_r+0xc0>
 80034f0:	465b      	mov	r3, fp
 80034f2:	4622      	mov	r2, r4
 80034f4:	4629      	mov	r1, r5
 80034f6:	4630      	mov	r0, r6
 80034f8:	f7ff ff93 	bl	8003422 <__sfputs_r>
 80034fc:	3001      	adds	r0, #1
 80034fe:	f000 80aa 	beq.w	8003656 <_vfiprintf_r+0x20e>
 8003502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003504:	445a      	add	r2, fp
 8003506:	9209      	str	r2, [sp, #36]	; 0x24
 8003508:	f89a 3000 	ldrb.w	r3, [sl]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a2 	beq.w	8003656 <_vfiprintf_r+0x20e>
 8003512:	2300      	movs	r3, #0
 8003514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800351c:	f10a 0a01 	add.w	sl, sl, #1
 8003520:	9304      	str	r3, [sp, #16]
 8003522:	9307      	str	r3, [sp, #28]
 8003524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003528:	931a      	str	r3, [sp, #104]	; 0x68
 800352a:	4654      	mov	r4, sl
 800352c:	2205      	movs	r2, #5
 800352e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003532:	4858      	ldr	r0, [pc, #352]	; (8003694 <_vfiprintf_r+0x24c>)
 8003534:	f7fc fe4c 	bl	80001d0 <memchr>
 8003538:	9a04      	ldr	r2, [sp, #16]
 800353a:	b9d8      	cbnz	r0, 8003574 <_vfiprintf_r+0x12c>
 800353c:	06d1      	lsls	r1, r2, #27
 800353e:	bf44      	itt	mi
 8003540:	2320      	movmi	r3, #32
 8003542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003546:	0713      	lsls	r3, r2, #28
 8003548:	bf44      	itt	mi
 800354a:	232b      	movmi	r3, #43	; 0x2b
 800354c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003550:	f89a 3000 	ldrb.w	r3, [sl]
 8003554:	2b2a      	cmp	r3, #42	; 0x2a
 8003556:	d015      	beq.n	8003584 <_vfiprintf_r+0x13c>
 8003558:	9a07      	ldr	r2, [sp, #28]
 800355a:	4654      	mov	r4, sl
 800355c:	2000      	movs	r0, #0
 800355e:	f04f 0c0a 	mov.w	ip, #10
 8003562:	4621      	mov	r1, r4
 8003564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003568:	3b30      	subs	r3, #48	; 0x30
 800356a:	2b09      	cmp	r3, #9
 800356c:	d94e      	bls.n	800360c <_vfiprintf_r+0x1c4>
 800356e:	b1b0      	cbz	r0, 800359e <_vfiprintf_r+0x156>
 8003570:	9207      	str	r2, [sp, #28]
 8003572:	e014      	b.n	800359e <_vfiprintf_r+0x156>
 8003574:	eba0 0308 	sub.w	r3, r0, r8
 8003578:	fa09 f303 	lsl.w	r3, r9, r3
 800357c:	4313      	orrs	r3, r2
 800357e:	9304      	str	r3, [sp, #16]
 8003580:	46a2      	mov	sl, r4
 8003582:	e7d2      	b.n	800352a <_vfiprintf_r+0xe2>
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	1d19      	adds	r1, r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	9103      	str	r1, [sp, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	bfbb      	ittet	lt
 8003590:	425b      	neglt	r3, r3
 8003592:	f042 0202 	orrlt.w	r2, r2, #2
 8003596:	9307      	strge	r3, [sp, #28]
 8003598:	9307      	strlt	r3, [sp, #28]
 800359a:	bfb8      	it	lt
 800359c:	9204      	strlt	r2, [sp, #16]
 800359e:	7823      	ldrb	r3, [r4, #0]
 80035a0:	2b2e      	cmp	r3, #46	; 0x2e
 80035a2:	d10c      	bne.n	80035be <_vfiprintf_r+0x176>
 80035a4:	7863      	ldrb	r3, [r4, #1]
 80035a6:	2b2a      	cmp	r3, #42	; 0x2a
 80035a8:	d135      	bne.n	8003616 <_vfiprintf_r+0x1ce>
 80035aa:	9b03      	ldr	r3, [sp, #12]
 80035ac:	1d1a      	adds	r2, r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	9203      	str	r2, [sp, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bfb8      	it	lt
 80035b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035ba:	3402      	adds	r4, #2
 80035bc:	9305      	str	r3, [sp, #20]
 80035be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80036a4 <_vfiprintf_r+0x25c>
 80035c2:	7821      	ldrb	r1, [r4, #0]
 80035c4:	2203      	movs	r2, #3
 80035c6:	4650      	mov	r0, sl
 80035c8:	f7fc fe02 	bl	80001d0 <memchr>
 80035cc:	b140      	cbz	r0, 80035e0 <_vfiprintf_r+0x198>
 80035ce:	2340      	movs	r3, #64	; 0x40
 80035d0:	eba0 000a 	sub.w	r0, r0, sl
 80035d4:	fa03 f000 	lsl.w	r0, r3, r0
 80035d8:	9b04      	ldr	r3, [sp, #16]
 80035da:	4303      	orrs	r3, r0
 80035dc:	3401      	adds	r4, #1
 80035de:	9304      	str	r3, [sp, #16]
 80035e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e4:	482c      	ldr	r0, [pc, #176]	; (8003698 <_vfiprintf_r+0x250>)
 80035e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ea:	2206      	movs	r2, #6
 80035ec:	f7fc fdf0 	bl	80001d0 <memchr>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d03f      	beq.n	8003674 <_vfiprintf_r+0x22c>
 80035f4:	4b29      	ldr	r3, [pc, #164]	; (800369c <_vfiprintf_r+0x254>)
 80035f6:	bb1b      	cbnz	r3, 8003640 <_vfiprintf_r+0x1f8>
 80035f8:	9b03      	ldr	r3, [sp, #12]
 80035fa:	3307      	adds	r3, #7
 80035fc:	f023 0307 	bic.w	r3, r3, #7
 8003600:	3308      	adds	r3, #8
 8003602:	9303      	str	r3, [sp, #12]
 8003604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003606:	443b      	add	r3, r7
 8003608:	9309      	str	r3, [sp, #36]	; 0x24
 800360a:	e767      	b.n	80034dc <_vfiprintf_r+0x94>
 800360c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003610:	460c      	mov	r4, r1
 8003612:	2001      	movs	r0, #1
 8003614:	e7a5      	b.n	8003562 <_vfiprintf_r+0x11a>
 8003616:	2300      	movs	r3, #0
 8003618:	3401      	adds	r4, #1
 800361a:	9305      	str	r3, [sp, #20]
 800361c:	4619      	mov	r1, r3
 800361e:	f04f 0c0a 	mov.w	ip, #10
 8003622:	4620      	mov	r0, r4
 8003624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003628:	3a30      	subs	r2, #48	; 0x30
 800362a:	2a09      	cmp	r2, #9
 800362c:	d903      	bls.n	8003636 <_vfiprintf_r+0x1ee>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0c5      	beq.n	80035be <_vfiprintf_r+0x176>
 8003632:	9105      	str	r1, [sp, #20]
 8003634:	e7c3      	b.n	80035be <_vfiprintf_r+0x176>
 8003636:	fb0c 2101 	mla	r1, ip, r1, r2
 800363a:	4604      	mov	r4, r0
 800363c:	2301      	movs	r3, #1
 800363e:	e7f0      	b.n	8003622 <_vfiprintf_r+0x1da>
 8003640:	ab03      	add	r3, sp, #12
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	462a      	mov	r2, r5
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <_vfiprintf_r+0x258>)
 8003648:	a904      	add	r1, sp, #16
 800364a:	4630      	mov	r0, r6
 800364c:	f3af 8000 	nop.w
 8003650:	4607      	mov	r7, r0
 8003652:	1c78      	adds	r0, r7, #1
 8003654:	d1d6      	bne.n	8003604 <_vfiprintf_r+0x1bc>
 8003656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003658:	07d9      	lsls	r1, r3, #31
 800365a:	d405      	bmi.n	8003668 <_vfiprintf_r+0x220>
 800365c:	89ab      	ldrh	r3, [r5, #12]
 800365e:	059a      	lsls	r2, r3, #22
 8003660:	d402      	bmi.n	8003668 <_vfiprintf_r+0x220>
 8003662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003664:	f7ff fdaf 	bl	80031c6 <__retarget_lock_release_recursive>
 8003668:	89ab      	ldrh	r3, [r5, #12]
 800366a:	065b      	lsls	r3, r3, #25
 800366c:	f53f af12 	bmi.w	8003494 <_vfiprintf_r+0x4c>
 8003670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003672:	e711      	b.n	8003498 <_vfiprintf_r+0x50>
 8003674:	ab03      	add	r3, sp, #12
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	462a      	mov	r2, r5
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <_vfiprintf_r+0x258>)
 800367c:	a904      	add	r1, sp, #16
 800367e:	4630      	mov	r0, r6
 8003680:	f000 f880 	bl	8003784 <_printf_i>
 8003684:	e7e4      	b.n	8003650 <_vfiprintf_r+0x208>
 8003686:	bf00      	nop
 8003688:	08003c38 	.word	0x08003c38
 800368c:	08003c58 	.word	0x08003c58
 8003690:	08003c18 	.word	0x08003c18
 8003694:	08003c78 	.word	0x08003c78
 8003698:	08003c82 	.word	0x08003c82
 800369c:	00000000 	.word	0x00000000
 80036a0:	08003423 	.word	0x08003423
 80036a4:	08003c7e 	.word	0x08003c7e

080036a8 <_printf_common>:
 80036a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ac:	4616      	mov	r6, r2
 80036ae:	4699      	mov	r9, r3
 80036b0:	688a      	ldr	r2, [r1, #8]
 80036b2:	690b      	ldr	r3, [r1, #16]
 80036b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bfb8      	it	lt
 80036bc:	4613      	movlt	r3, r2
 80036be:	6033      	str	r3, [r6, #0]
 80036c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036c4:	4607      	mov	r7, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	b10a      	cbz	r2, 80036ce <_printf_common+0x26>
 80036ca:	3301      	adds	r3, #1
 80036cc:	6033      	str	r3, [r6, #0]
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	0699      	lsls	r1, r3, #26
 80036d2:	bf42      	ittt	mi
 80036d4:	6833      	ldrmi	r3, [r6, #0]
 80036d6:	3302      	addmi	r3, #2
 80036d8:	6033      	strmi	r3, [r6, #0]
 80036da:	6825      	ldr	r5, [r4, #0]
 80036dc:	f015 0506 	ands.w	r5, r5, #6
 80036e0:	d106      	bne.n	80036f0 <_printf_common+0x48>
 80036e2:	f104 0a19 	add.w	sl, r4, #25
 80036e6:	68e3      	ldr	r3, [r4, #12]
 80036e8:	6832      	ldr	r2, [r6, #0]
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	42ab      	cmp	r3, r5
 80036ee:	dc26      	bgt.n	800373e <_printf_common+0x96>
 80036f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036f4:	1e13      	subs	r3, r2, #0
 80036f6:	6822      	ldr	r2, [r4, #0]
 80036f8:	bf18      	it	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	0692      	lsls	r2, r2, #26
 80036fe:	d42b      	bmi.n	8003758 <_printf_common+0xb0>
 8003700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003704:	4649      	mov	r1, r9
 8003706:	4638      	mov	r0, r7
 8003708:	47c0      	blx	r8
 800370a:	3001      	adds	r0, #1
 800370c:	d01e      	beq.n	800374c <_printf_common+0xa4>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	68e5      	ldr	r5, [r4, #12]
 8003712:	6832      	ldr	r2, [r6, #0]
 8003714:	f003 0306 	and.w	r3, r3, #6
 8003718:	2b04      	cmp	r3, #4
 800371a:	bf08      	it	eq
 800371c:	1aad      	subeq	r5, r5, r2
 800371e:	68a3      	ldr	r3, [r4, #8]
 8003720:	6922      	ldr	r2, [r4, #16]
 8003722:	bf0c      	ite	eq
 8003724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003728:	2500      	movne	r5, #0
 800372a:	4293      	cmp	r3, r2
 800372c:	bfc4      	itt	gt
 800372e:	1a9b      	subgt	r3, r3, r2
 8003730:	18ed      	addgt	r5, r5, r3
 8003732:	2600      	movs	r6, #0
 8003734:	341a      	adds	r4, #26
 8003736:	42b5      	cmp	r5, r6
 8003738:	d11a      	bne.n	8003770 <_printf_common+0xc8>
 800373a:	2000      	movs	r0, #0
 800373c:	e008      	b.n	8003750 <_printf_common+0xa8>
 800373e:	2301      	movs	r3, #1
 8003740:	4652      	mov	r2, sl
 8003742:	4649      	mov	r1, r9
 8003744:	4638      	mov	r0, r7
 8003746:	47c0      	blx	r8
 8003748:	3001      	adds	r0, #1
 800374a:	d103      	bne.n	8003754 <_printf_common+0xac>
 800374c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003754:	3501      	adds	r5, #1
 8003756:	e7c6      	b.n	80036e6 <_printf_common+0x3e>
 8003758:	18e1      	adds	r1, r4, r3
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	2030      	movs	r0, #48	; 0x30
 800375e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003762:	4422      	add	r2, r4
 8003764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800376c:	3302      	adds	r3, #2
 800376e:	e7c7      	b.n	8003700 <_printf_common+0x58>
 8003770:	2301      	movs	r3, #1
 8003772:	4622      	mov	r2, r4
 8003774:	4649      	mov	r1, r9
 8003776:	4638      	mov	r0, r7
 8003778:	47c0      	blx	r8
 800377a:	3001      	adds	r0, #1
 800377c:	d0e6      	beq.n	800374c <_printf_common+0xa4>
 800377e:	3601      	adds	r6, #1
 8003780:	e7d9      	b.n	8003736 <_printf_common+0x8e>
	...

08003784 <_printf_i>:
 8003784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	460c      	mov	r4, r1
 800378a:	4691      	mov	r9, r2
 800378c:	7e27      	ldrb	r7, [r4, #24]
 800378e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003790:	2f78      	cmp	r7, #120	; 0x78
 8003792:	4680      	mov	r8, r0
 8003794:	469a      	mov	sl, r3
 8003796:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800379a:	d807      	bhi.n	80037ac <_printf_i+0x28>
 800379c:	2f62      	cmp	r7, #98	; 0x62
 800379e:	d80a      	bhi.n	80037b6 <_printf_i+0x32>
 80037a0:	2f00      	cmp	r7, #0
 80037a2:	f000 80d8 	beq.w	8003956 <_printf_i+0x1d2>
 80037a6:	2f58      	cmp	r7, #88	; 0x58
 80037a8:	f000 80a3 	beq.w	80038f2 <_printf_i+0x16e>
 80037ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037b4:	e03a      	b.n	800382c <_printf_i+0xa8>
 80037b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037ba:	2b15      	cmp	r3, #21
 80037bc:	d8f6      	bhi.n	80037ac <_printf_i+0x28>
 80037be:	a001      	add	r0, pc, #4	; (adr r0, 80037c4 <_printf_i+0x40>)
 80037c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	08003831 	.word	0x08003831
 80037cc:	080037ad 	.word	0x080037ad
 80037d0:	080037ad 	.word	0x080037ad
 80037d4:	080037ad 	.word	0x080037ad
 80037d8:	080037ad 	.word	0x080037ad
 80037dc:	08003831 	.word	0x08003831
 80037e0:	080037ad 	.word	0x080037ad
 80037e4:	080037ad 	.word	0x080037ad
 80037e8:	080037ad 	.word	0x080037ad
 80037ec:	080037ad 	.word	0x080037ad
 80037f0:	0800393d 	.word	0x0800393d
 80037f4:	08003861 	.word	0x08003861
 80037f8:	0800391f 	.word	0x0800391f
 80037fc:	080037ad 	.word	0x080037ad
 8003800:	080037ad 	.word	0x080037ad
 8003804:	0800395f 	.word	0x0800395f
 8003808:	080037ad 	.word	0x080037ad
 800380c:	08003861 	.word	0x08003861
 8003810:	080037ad 	.word	0x080037ad
 8003814:	080037ad 	.word	0x080037ad
 8003818:	08003927 	.word	0x08003927
 800381c:	680b      	ldr	r3, [r1, #0]
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	600a      	str	r2, [r1, #0]
 8003824:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800382c:	2301      	movs	r3, #1
 800382e:	e0a3      	b.n	8003978 <_printf_i+0x1f4>
 8003830:	6825      	ldr	r5, [r4, #0]
 8003832:	6808      	ldr	r0, [r1, #0]
 8003834:	062e      	lsls	r6, r5, #24
 8003836:	f100 0304 	add.w	r3, r0, #4
 800383a:	d50a      	bpl.n	8003852 <_printf_i+0xce>
 800383c:	6805      	ldr	r5, [r0, #0]
 800383e:	600b      	str	r3, [r1, #0]
 8003840:	2d00      	cmp	r5, #0
 8003842:	da03      	bge.n	800384c <_printf_i+0xc8>
 8003844:	232d      	movs	r3, #45	; 0x2d
 8003846:	426d      	negs	r5, r5
 8003848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800384c:	485e      	ldr	r0, [pc, #376]	; (80039c8 <_printf_i+0x244>)
 800384e:	230a      	movs	r3, #10
 8003850:	e019      	b.n	8003886 <_printf_i+0x102>
 8003852:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003856:	6805      	ldr	r5, [r0, #0]
 8003858:	600b      	str	r3, [r1, #0]
 800385a:	bf18      	it	ne
 800385c:	b22d      	sxthne	r5, r5
 800385e:	e7ef      	b.n	8003840 <_printf_i+0xbc>
 8003860:	680b      	ldr	r3, [r1, #0]
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	1d18      	adds	r0, r3, #4
 8003866:	6008      	str	r0, [r1, #0]
 8003868:	0628      	lsls	r0, r5, #24
 800386a:	d501      	bpl.n	8003870 <_printf_i+0xec>
 800386c:	681d      	ldr	r5, [r3, #0]
 800386e:	e002      	b.n	8003876 <_printf_i+0xf2>
 8003870:	0669      	lsls	r1, r5, #25
 8003872:	d5fb      	bpl.n	800386c <_printf_i+0xe8>
 8003874:	881d      	ldrh	r5, [r3, #0]
 8003876:	4854      	ldr	r0, [pc, #336]	; (80039c8 <_printf_i+0x244>)
 8003878:	2f6f      	cmp	r7, #111	; 0x6f
 800387a:	bf0c      	ite	eq
 800387c:	2308      	moveq	r3, #8
 800387e:	230a      	movne	r3, #10
 8003880:	2100      	movs	r1, #0
 8003882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003886:	6866      	ldr	r6, [r4, #4]
 8003888:	60a6      	str	r6, [r4, #8]
 800388a:	2e00      	cmp	r6, #0
 800388c:	bfa2      	ittt	ge
 800388e:	6821      	ldrge	r1, [r4, #0]
 8003890:	f021 0104 	bicge.w	r1, r1, #4
 8003894:	6021      	strge	r1, [r4, #0]
 8003896:	b90d      	cbnz	r5, 800389c <_printf_i+0x118>
 8003898:	2e00      	cmp	r6, #0
 800389a:	d04d      	beq.n	8003938 <_printf_i+0x1b4>
 800389c:	4616      	mov	r6, r2
 800389e:	fbb5 f1f3 	udiv	r1, r5, r3
 80038a2:	fb03 5711 	mls	r7, r3, r1, r5
 80038a6:	5dc7      	ldrb	r7, [r0, r7]
 80038a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038ac:	462f      	mov	r7, r5
 80038ae:	42bb      	cmp	r3, r7
 80038b0:	460d      	mov	r5, r1
 80038b2:	d9f4      	bls.n	800389e <_printf_i+0x11a>
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d10b      	bne.n	80038d0 <_printf_i+0x14c>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	07df      	lsls	r7, r3, #31
 80038bc:	d508      	bpl.n	80038d0 <_printf_i+0x14c>
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	6861      	ldr	r1, [r4, #4]
 80038c2:	4299      	cmp	r1, r3
 80038c4:	bfde      	ittt	le
 80038c6:	2330      	movle	r3, #48	; 0x30
 80038c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80038d0:	1b92      	subs	r2, r2, r6
 80038d2:	6122      	str	r2, [r4, #16]
 80038d4:	f8cd a000 	str.w	sl, [sp]
 80038d8:	464b      	mov	r3, r9
 80038da:	aa03      	add	r2, sp, #12
 80038dc:	4621      	mov	r1, r4
 80038de:	4640      	mov	r0, r8
 80038e0:	f7ff fee2 	bl	80036a8 <_printf_common>
 80038e4:	3001      	adds	r0, #1
 80038e6:	d14c      	bne.n	8003982 <_printf_i+0x1fe>
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ec:	b004      	add	sp, #16
 80038ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f2:	4835      	ldr	r0, [pc, #212]	; (80039c8 <_printf_i+0x244>)
 80038f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	680e      	ldr	r6, [r1, #0]
 80038fc:	061f      	lsls	r7, r3, #24
 80038fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8003902:	600e      	str	r6, [r1, #0]
 8003904:	d514      	bpl.n	8003930 <_printf_i+0x1ac>
 8003906:	07d9      	lsls	r1, r3, #31
 8003908:	bf44      	itt	mi
 800390a:	f043 0320 	orrmi.w	r3, r3, #32
 800390e:	6023      	strmi	r3, [r4, #0]
 8003910:	b91d      	cbnz	r5, 800391a <_printf_i+0x196>
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	f023 0320 	bic.w	r3, r3, #32
 8003918:	6023      	str	r3, [r4, #0]
 800391a:	2310      	movs	r3, #16
 800391c:	e7b0      	b.n	8003880 <_printf_i+0xfc>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	f043 0320 	orr.w	r3, r3, #32
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	2378      	movs	r3, #120	; 0x78
 8003928:	4828      	ldr	r0, [pc, #160]	; (80039cc <_printf_i+0x248>)
 800392a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800392e:	e7e3      	b.n	80038f8 <_printf_i+0x174>
 8003930:	065e      	lsls	r6, r3, #25
 8003932:	bf48      	it	mi
 8003934:	b2ad      	uxthmi	r5, r5
 8003936:	e7e6      	b.n	8003906 <_printf_i+0x182>
 8003938:	4616      	mov	r6, r2
 800393a:	e7bb      	b.n	80038b4 <_printf_i+0x130>
 800393c:	680b      	ldr	r3, [r1, #0]
 800393e:	6826      	ldr	r6, [r4, #0]
 8003940:	6960      	ldr	r0, [r4, #20]
 8003942:	1d1d      	adds	r5, r3, #4
 8003944:	600d      	str	r5, [r1, #0]
 8003946:	0635      	lsls	r5, r6, #24
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	d501      	bpl.n	8003950 <_printf_i+0x1cc>
 800394c:	6018      	str	r0, [r3, #0]
 800394e:	e002      	b.n	8003956 <_printf_i+0x1d2>
 8003950:	0671      	lsls	r1, r6, #25
 8003952:	d5fb      	bpl.n	800394c <_printf_i+0x1c8>
 8003954:	8018      	strh	r0, [r3, #0]
 8003956:	2300      	movs	r3, #0
 8003958:	6123      	str	r3, [r4, #16]
 800395a:	4616      	mov	r6, r2
 800395c:	e7ba      	b.n	80038d4 <_printf_i+0x150>
 800395e:	680b      	ldr	r3, [r1, #0]
 8003960:	1d1a      	adds	r2, r3, #4
 8003962:	600a      	str	r2, [r1, #0]
 8003964:	681e      	ldr	r6, [r3, #0]
 8003966:	6862      	ldr	r2, [r4, #4]
 8003968:	2100      	movs	r1, #0
 800396a:	4630      	mov	r0, r6
 800396c:	f7fc fc30 	bl	80001d0 <memchr>
 8003970:	b108      	cbz	r0, 8003976 <_printf_i+0x1f2>
 8003972:	1b80      	subs	r0, r0, r6
 8003974:	6060      	str	r0, [r4, #4]
 8003976:	6863      	ldr	r3, [r4, #4]
 8003978:	6123      	str	r3, [r4, #16]
 800397a:	2300      	movs	r3, #0
 800397c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003980:	e7a8      	b.n	80038d4 <_printf_i+0x150>
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	4632      	mov	r2, r6
 8003986:	4649      	mov	r1, r9
 8003988:	4640      	mov	r0, r8
 800398a:	47d0      	blx	sl
 800398c:	3001      	adds	r0, #1
 800398e:	d0ab      	beq.n	80038e8 <_printf_i+0x164>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	079b      	lsls	r3, r3, #30
 8003994:	d413      	bmi.n	80039be <_printf_i+0x23a>
 8003996:	68e0      	ldr	r0, [r4, #12]
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	4298      	cmp	r0, r3
 800399c:	bfb8      	it	lt
 800399e:	4618      	movlt	r0, r3
 80039a0:	e7a4      	b.n	80038ec <_printf_i+0x168>
 80039a2:	2301      	movs	r3, #1
 80039a4:	4632      	mov	r2, r6
 80039a6:	4649      	mov	r1, r9
 80039a8:	4640      	mov	r0, r8
 80039aa:	47d0      	blx	sl
 80039ac:	3001      	adds	r0, #1
 80039ae:	d09b      	beq.n	80038e8 <_printf_i+0x164>
 80039b0:	3501      	adds	r5, #1
 80039b2:	68e3      	ldr	r3, [r4, #12]
 80039b4:	9903      	ldr	r1, [sp, #12]
 80039b6:	1a5b      	subs	r3, r3, r1
 80039b8:	42ab      	cmp	r3, r5
 80039ba:	dcf2      	bgt.n	80039a2 <_printf_i+0x21e>
 80039bc:	e7eb      	b.n	8003996 <_printf_i+0x212>
 80039be:	2500      	movs	r5, #0
 80039c0:	f104 0619 	add.w	r6, r4, #25
 80039c4:	e7f5      	b.n	80039b2 <_printf_i+0x22e>
 80039c6:	bf00      	nop
 80039c8:	08003c89 	.word	0x08003c89
 80039cc:	08003c9a 	.word	0x08003c9a

080039d0 <_sbrk_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4d06      	ldr	r5, [pc, #24]	; (80039ec <_sbrk_r+0x1c>)
 80039d4:	2300      	movs	r3, #0
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	f7fc ff62 	bl	80008a4 <_sbrk>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_sbrk_r+0x1a>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_sbrk_r+0x1a>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	2000014c 	.word	0x2000014c

080039f0 <__sread>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	460c      	mov	r4, r1
 80039f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f8:	f000 f8a0 	bl	8003b3c <_read_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	bfab      	itete	ge
 8003a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a02:	89a3      	ldrhlt	r3, [r4, #12]
 8003a04:	181b      	addge	r3, r3, r0
 8003a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a0a:	bfac      	ite	ge
 8003a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a0e:	81a3      	strhlt	r3, [r4, #12]
 8003a10:	bd10      	pop	{r4, pc}

08003a12 <__swrite>:
 8003a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a16:	461f      	mov	r7, r3
 8003a18:	898b      	ldrh	r3, [r1, #12]
 8003a1a:	05db      	lsls	r3, r3, #23
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	4616      	mov	r6, r2
 8003a22:	d505      	bpl.n	8003a30 <__swrite+0x1e>
 8003a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a28:	2302      	movs	r3, #2
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f000 f868 	bl	8003b00 <_lseek_r>
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	4632      	mov	r2, r6
 8003a3e:	463b      	mov	r3, r7
 8003a40:	4628      	mov	r0, r5
 8003a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a46:	f000 b817 	b.w	8003a78 <_write_r>

08003a4a <__sseek>:
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a52:	f000 f855 	bl	8003b00 <_lseek_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	bf15      	itete	ne
 8003a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a66:	81a3      	strheq	r3, [r4, #12]
 8003a68:	bf18      	it	ne
 8003a6a:	81a3      	strhne	r3, [r4, #12]
 8003a6c:	bd10      	pop	{r4, pc}

08003a6e <__sclose>:
 8003a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a72:	f000 b813 	b.w	8003a9c <_close_r>
	...

08003a78 <_write_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4d07      	ldr	r5, [pc, #28]	; (8003a98 <_write_r+0x20>)
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	4608      	mov	r0, r1
 8003a80:	4611      	mov	r1, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	602a      	str	r2, [r5, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f7fc fe0e 	bl	80006a8 <_write>
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d102      	bne.n	8003a96 <_write_r+0x1e>
 8003a90:	682b      	ldr	r3, [r5, #0]
 8003a92:	b103      	cbz	r3, 8003a96 <_write_r+0x1e>
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	bd38      	pop	{r3, r4, r5, pc}
 8003a98:	2000014c 	.word	0x2000014c

08003a9c <_close_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4d06      	ldr	r5, [pc, #24]	; (8003ab8 <_close_r+0x1c>)
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	602b      	str	r3, [r5, #0]
 8003aa8:	f7fc fec7 	bl	800083a <_close>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d102      	bne.n	8003ab6 <_close_r+0x1a>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	b103      	cbz	r3, 8003ab6 <_close_r+0x1a>
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	2000014c 	.word	0x2000014c

08003abc <_fstat_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4d07      	ldr	r5, [pc, #28]	; (8003adc <_fstat_r+0x20>)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	f7fc fec2 	bl	8000852 <_fstat>
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	d102      	bne.n	8003ad8 <_fstat_r+0x1c>
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	b103      	cbz	r3, 8003ad8 <_fstat_r+0x1c>
 8003ad6:	6023      	str	r3, [r4, #0]
 8003ad8:	bd38      	pop	{r3, r4, r5, pc}
 8003ada:	bf00      	nop
 8003adc:	2000014c 	.word	0x2000014c

08003ae0 <_isatty_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4d06      	ldr	r5, [pc, #24]	; (8003afc <_isatty_r+0x1c>)
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4608      	mov	r0, r1
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	f7fc fec1 	bl	8000872 <_isatty>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_isatty_r+0x1a>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_isatty_r+0x1a>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	2000014c 	.word	0x2000014c

08003b00 <_lseek_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4d07      	ldr	r5, [pc, #28]	; (8003b20 <_lseek_r+0x20>)
 8003b04:	4604      	mov	r4, r0
 8003b06:	4608      	mov	r0, r1
 8003b08:	4611      	mov	r1, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f7fc feba 	bl	8000888 <_lseek>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_lseek_r+0x1e>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_lseek_r+0x1e>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	2000014c 	.word	0x2000014c

08003b24 <__malloc_lock>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__malloc_lock+0x8>)
 8003b26:	f7ff bb4d 	b.w	80031c4 <__retarget_lock_acquire_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	20000144 	.word	0x20000144

08003b30 <__malloc_unlock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__malloc_unlock+0x8>)
 8003b32:	f7ff bb48 	b.w	80031c6 <__retarget_lock_release_recursive>
 8003b36:	bf00      	nop
 8003b38:	20000144 	.word	0x20000144

08003b3c <_read_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4d07      	ldr	r5, [pc, #28]	; (8003b5c <_read_r+0x20>)
 8003b40:	4604      	mov	r4, r0
 8003b42:	4608      	mov	r0, r1
 8003b44:	4611      	mov	r1, r2
 8003b46:	2200      	movs	r2, #0
 8003b48:	602a      	str	r2, [r5, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f7fc fe58 	bl	8000800 <_read>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d102      	bne.n	8003b5a <_read_r+0x1e>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	b103      	cbz	r3, 8003b5a <_read_r+0x1e>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	2000014c 	.word	0x2000014c

08003b60 <_init>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr

08003b6c <_fini>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr
